import{_ as i,c as a,o as n,b0 as e}from"./chunks/framework.w6NQj85O.js";const E=JSON.parse('{"title":"物品外观","description":"","frontmatter":{},"headers":[],"relativePath":"Oraxen/configuration.item-appearance.md","filePath":"Oraxen/configuration.item-appearance.md"}'),t={name:"Oraxen/configuration.item-appearance.md"};function l(p,s,h,k,d,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="物品外观" tabindex="-1">物品外观 <a class="header-anchor" href="#物品外观" aria-label="Permalink to &quot;物品外观&quot;">​</a></h1><p>如何自定义物品外观？</p><p>与大多数允许你创建自定义物品的插件不同的是，Oraxen 支持创建纹理包：即你可以直接通过配置定义物品的样式，插件则会帮你完成资源包的处理。对于 Minecraft，每个物品的外观是由一个叫做模型的 json 文件决定的。大多数物品的模型都是简单的二维。若要避免重复编写 json 文件的麻烦，你可以让 Oraxen 自行生成。</p><h2 id="纹理包文件夹" tabindex="-1">纹理包文件夹 <a class="header-anchor" href="#纹理包文件夹" aria-label="Permalink to &quot;纹理包文件夹&quot;">​</a></h2><p>这个文件夹（<code>根目录/plugins/Oraxen/pack</code>）包含了你的纹理包。它的工作方式与正常的 Minecraft 纹理包相似，但更为简单。你可以将你的纹理放入 textures 文件夹，将模型放入 models 文件夹。你也可以在这些文件夹中创建子文件夹，这样你就可以为它们分类。在插件生成纹理包时，它会在这个文件夹中将最终结果以 <code>pack.zip</code> 文件输出。</p><h2 id="创建简单的二维物品" tabindex="-1">创建简单的二维物品 <a class="header-anchor" href="#创建简单的二维物品" aria-label="Permalink to &quot;创建简单的二维物品&quot;">​</a></h2><p>将你需要的贴图放置在 pack 文件夹下的 textures 文件夹。然后你可以通过替换材质的方法让 Oraxen 生成模型：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Pack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    generate_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    parent_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item/handheld&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    textures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example_image1.png</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 不必带上 png 后缀</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example_image2.png</span></span></code></pre></div><p><code>parent_model</code> 部分是 Minecraft 要求的。实际上这会允许你的物品继承 Minecraft 已经存在的部分类型的物品模板。你可以在 Minecraft 的默认模型中找到符合要求的内容，一般情况下我推荐为手持武器使用 <code>item/handheld</code>，为诸如上文示例的紫水晶等普通物品使用 <code>item/generated</code>。</p><p>你也可以用相似的方法声明贴图，在使用方块父模型时更加有用。</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Pack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  generate_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  parent_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;block/cube&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  textures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example_image.png</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    side</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example_image2.png</span></span></code></pre></div><h2 id="使用-json-模型" tabindex="-1">使用 json 模型 <a class="header-anchor" href="#使用-json-模型" aria-label="Permalink to &quot;使用 json 模型&quot;">​</a></h2><p>创建一个 json 模型非常耗时，但它允许你制作一些很酷炫的东西（如三维物品）。通过 Oraxen 实现 json 物品模型则相对简单：将你的贴图放在 <code>textures</code> 文件夹，并将模型文件放在 <code>models</code> 文件夹下（它们在 <code>Oraxen/pack</code> 文件夹中）。然后你就可以让 Oraxen 将这些模型应用在物品上：</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>请在模型和贴图名称上只使用小写字符。大写字符在 1.11 之后的 Minecraft 便不再受到支持（尽管 Optifine 为他们的使用者保留了这个功能）。</p></div><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Pack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    generate_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example_model.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # json 后缀可以去掉</span></span></code></pre></div><h3 id="⚠️-使用-json-模型前的须知" tabindex="-1">⚠️ 使用 json 模型前的须知！ <a class="header-anchor" href="#⚠️-使用-json-模型前的须知" aria-label="Permalink to &quot;⚠️ 使用 json 模型前的须知！&quot;">​</a></h3><p>通常情况下你将贴图放在文件夹中，打开 json 文件并找到前几行，你应该能看到诸如下文的类似文本：</p><div class="language-JSON vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;__comment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Designed by HighBridRed for Oraxen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;textures&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;particle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom/bonesword_palette&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;texture&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom/bonesword_palette&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;bonesword_palette&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom/bonesword_palette&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">	...</span></span></code></pre></div><p>如你所见，贴图对应的路径为 <strong>custom/bonesword_palette</strong>，这就意味着 Minecraft 会尝试在 <code>custom</code> 文件夹中寻找 <strong>bonesword_palette.png</strong>，所以你需要在 <code>Oraxen/pack/textures</code> 中创建对应的文件夹。你也可以移除 <code>custom/</code> 文件夹而只保留文件，这样你只需将文件拖入 <code>textures</code> 文件夹即可。</p><h2 id="使用阻挡动作-json-模型-如盾等物品" tabindex="-1">使用阻挡动作 json 模型（如盾等物品） <a class="header-anchor" href="#使用阻挡动作-json-模型-如盾等物品" aria-label="Permalink to &quot;使用阻挡动作 json 模型（如盾等物品）&quot;">​</a></h2><p>若你想要为诸如盾的物品创建模型，你需要指定右键点击时使用的阻挡模型，但对 Oraxen 来说这非常简单。下文是一个示例配置：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Pack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    generate_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example_shield.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # json 后缀是可以去掉的</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    blocking_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example_shield_blocking.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # json 后缀是可以去掉的</span></span></code></pre></div><h2 id="使用拉弓动作-json-模型-如弓等物品" tabindex="-1">使用拉弓动作 json 模型（如弓等物品） <a class="header-anchor" href="#使用拉弓动作-json-模型-如弓等物品" aria-label="Permalink to &quot;使用拉弓动作 json 模型（如弓等物品）&quot;">​</a></h2><p>若你想要为弓创建自定义模型，你需要指定右键蓄力时使用的模型，对 Oraxen 来说这非常简单。</p><p>下文是一个示例配置：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Pack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    generate_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/combat_bow</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    pulling_models</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/combat_bow_pulling_0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/combat_bow_pulling_1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/combat_bow_pulling_2</span></span></code></pre></div><p>如果你只有贴图文件，这些对 <code>pulling_textures</code> 同样有效。</p><h2 id="使用-charged-model-上膛-json-模型-如弩等物品" tabindex="-1">使用 <code>charged_model</code>（上膛）json 模型（如弩等物品） <a class="header-anchor" href="#使用-charged-model-上膛-json-模型-如弩等物品" aria-label="Permalink to &quot;使用 \`charged_model\`（上膛）json 模型（如弩等物品）&quot;">​</a></h2><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Pack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    generate_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/custom_bow</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    pulling_models</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/custom_bow_pulling_0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/custom_bow_pulling_1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/custom_bow_pulling_2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    charged_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/custom_bow_pulling_2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    firework_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/custom_bow_charged</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 非必需</span></span></code></pre></div><p>如果你只有贴图文件，这些设置对 <code>charged_texture</code> 和 <code>firework_texture</code> 同样有效。</p><h2 id="使用-cast-model-抛竿-json-模型-如鱼竿等物品" tabindex="-1">使用 <code>cast_model</code>（抛竿）json 模型（如鱼竿等物品） <a class="header-anchor" href="#使用-cast-model-抛竿-json-模型-如鱼竿等物品" aria-label="Permalink to &quot;使用 \`cast_model\`（抛竿）json 模型（如鱼竿等物品）&quot;">​</a></h2><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Pack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    generate_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/fishing_rod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    cast_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/fishing_rod_cast</span></span></code></pre></div><p>如果你只有贴图，这些设置对 <code>cast_texture</code> 同样有效。</p><h2 id="使用-damaged-model-耐久度-json-模型-对不同耐久的物品" tabindex="-1">使用 <code>damaged_model</code>（耐久度）json 模型（对不同耐久的物品） <a class="header-anchor" href="#使用-damaged-model-耐久度-json-模型-对不同耐久的物品" aria-label="Permalink to &quot;使用 \`damaged_model\`（耐久度）json 模型（对不同耐久的物品）&quot;">​</a></h2><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Pack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  generate_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/diamond_sword</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  damaged_models</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/diamond_sword_damaged1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/diamond_sword_damaged2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default/diamond_sword_damaged3</span></span></code></pre></div><p>如果你只有贴图，这些设置对 <code>damaged_textures</code> 同样有效。</p>`,36)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
