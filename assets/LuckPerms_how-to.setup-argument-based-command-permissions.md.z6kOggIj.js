import{_ as r,c as o,o as t,b0 as a}from"./chunks/framework.w6NQj85O.js";const m=JSON.parse('{"title":"基于参数的命令权限","description":"","frontmatter":{},"headers":[],"relativePath":"LuckPerms/how-to.setup-argument-based-command-permissions.md","filePath":"LuckPerms/how-to.setup-argument-based-command-permissions.md"}'),d={name:"LuckPerms/how-to.setup-argument-based-command-permissions.md"};function l(s,e,c,i,u,p){return t(),o("div",null,e[0]||(e[0]=[a('<h1 id="基于参数的命令权限" tabindex="-1">基于参数的命令权限 <a class="header-anchor" href="#基于参数的命令权限" aria-label="Permalink to &quot;基于参数的命令权限&quot;">​</a></h1><p>该页面是配置文件中 <code>argument-based-command-permissions</code> 的详细解释。</p><p><strong>若要下列权限能够正常工作，你必须在 <a href="./configuration.html">config.yml</a> 中启用 <a href="./configuration.html#argument-based-command-permissions"><code>argument-based-command-permissions</code></a> 项！</strong></p><p>在该项启用后，LuckPerms 会在玩家尝试修改或浏览权限数据时启用额外的权限检查。</p><p>这些权限允许对玩家修改进行更好的控制，包括阻止他们获取某个权限组的权限，或对某些上下文进行修改。</p><p>额外的检查可被分为三部分。</p><h3 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h3><ul><li><a href="#在玩家浏览修改自己或其他玩家时的检查"><strong>在玩家浏览/修改自己或其他玩家时的检查</strong></a><ul><li><a href="#修改自身">修改自身</a></li><li><a href="#修改其他玩家">修改其他玩家</a></li><li><a href="#浏览自身">浏览自身</a></li><li><a href="#浏览其他玩家">浏览其他玩家</a></li></ul></li><li><a href="#在玩家浏览修改权限组时的检查"><strong>在玩家浏览/修改权限组时的检查</strong></a><ul><li><a href="#修改权限组">修改权限组</a></li><li><a href="#浏览权限组">浏览权限组</a></li></ul></li><li><a href="#在玩家对指定上下文进行修改时的检查"><strong>在玩家对指定上下文进行修改时的检查</strong></a><ul><li><a href="#修改全局上下文">修改全局上下文</a></li><li><a href="#修改指定部分上下文">修改指定部分上下文</a></li></ul></li><li><a href="#在玩家对指定参数修改时的检查"><strong>在玩家对指定参数修改时的检查</strong></a></li></ul><h2 id="在玩家浏览-修改自己或其他玩家时的检查" tabindex="-1">在玩家浏览/修改自己或其他玩家时的检查 <a class="header-anchor" href="#在玩家浏览-修改自己或其他玩家时的检查" aria-label="Permalink to &quot;在玩家浏览/修改自己或其他玩家时的检查&quot;">​</a></h2><h3 id="修改自身" tabindex="-1">修改自身 <a class="header-anchor" href="#修改自身" aria-label="Permalink to &quot;修改自身&quot;">​</a></h3><p>在玩家尝试使用命令修改自身时，LuckPerms 将会检查 <code>[基础命令权限].modify.self</code> 权限。若返回 true，则允许操作，反之则阻止操作。</p><p>若玩家被检查时未设置相关值（未定义），LuckPerms 会检查 <code>luckperms.modify.user.self</code> 权限并以此来代替原有结果。若两个检查都没能返回 true，则阻止玩家的本次操作。</p><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>例如，如果我们输入命令 <code>/lp user check clear</code>，LuckPerms 会按顺序检查下列权限：</p><ul><li><code>luckperms.user.clear</code></li><li><code>luckperms.user.clear.modify.self</code>（若检查到玩家拥有这条权限（无论 true/false），则跳过下一条权限的检查）</li><li><code>luckperms.modify.user.self</code></li></ul><p>如果这些检查都返回了 false，则操作会被阻止。</p><h3 id="修改其他玩家" tabindex="-1">修改其他玩家 <a class="header-anchor" href="#修改其他玩家" aria-label="Permalink to &quot;修改其他玩家&quot;">​</a></h3><p>当玩家尝试使用命令修改其他玩家时，LuckPerms 会检查 <code>[基础命令权限].modify.others</code> 权限。若返回 true，则允许操作，反之则阻止操作。</p><p>若玩家被检查时未设置相关值（未定义），LuckPerms 会检查 <code>luckperms.modify.user.others</code> 权限并以此来代替原有结果。若两个检查都没能返回 true，则阻止玩家的本次操作。</p><h4 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>例如，如果我们输入命令 <code>/lp user Notch clear</code>，LuckPerms 会按顺序检查下列权限：</p><ul><li><code>luckperms.user.clear</code></li><li><code>luckperms.user.clear.modify.others</code>（若检查到玩家拥有这条权限（无论 true/false），则跳过下一条权限的检查）</li><li><code>luckperms.modify.user.others</code></li></ul><p>如果这些检查都返回了 false，则操作会被阻止。</p><h3 id="浏览自身" tabindex="-1">浏览自身 <a class="header-anchor" href="#浏览自身" aria-label="Permalink to &quot;浏览自身&quot;">​</a></h3><p>当玩家尝试使用命令浏览自己的数据时，LuckPerms 会检查 <code>[基础命令权限].view.self</code> 权限。若返回 true，则允许操作，反之则阻止操作。</p><p>若玩家被检查时未设置相关值（未定义），LuckPerms 会检查 <code>luckperms.view.user.self</code> 权限并以此来代替原有结果。若两个检查都没能返回 true，则阻止玩家的本次操作。</p><h4 id="示例-2" tabindex="-1">示例 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>例如，如果我们输入命令 <code>/lp user Luck permission info</code>，LuckPerms 会按顺序检查下列权限：</p><ul><li><code>luckperms.user.clear</code></li><li><code>luckperms.user.clear.view.self</code>（若检查到玩家拥有这条权限（无论 true/false），则跳过下一条权限的检查）</li><li><code>luckperms.view.user.self</code></li></ul><p>如果这些检查都返回了 false，则操作会被阻止。</p><h3 id="浏览其他玩家" tabindex="-1">浏览其他玩家 <a class="header-anchor" href="#浏览其他玩家" aria-label="Permalink to &quot;浏览其他玩家&quot;">​</a></h3><p>当玩家尝试使用命令浏览自己的数据时，LuckPerms 会检查 <code>[基础命令权限].view.others</code> 权限。若返回 true，则允许操作，反之则阻止操作。</p><p>若玩家被检查时未设置相关值（未定义），LuckPerms 会检查 <code>luckperms.view.user.others</code> 权限并以此来代替原有结果。若两个检查都没能返回 true，则阻止玩家的本次操作。</p><h4 id="示例-3" tabindex="-1">示例 <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>例如，如果我们输入命令 <code>/lp user Luck permission info</code>，LuckPerms 会按顺序检查下列权限：</p><ul><li><code>luckperms.user.clear</code></li><li><code>luckperms.user.clear.view.others</code>（若检查到玩家拥有这条权限（无论 true/false），则跳过下一条权限的检查）</li><li><code>luckperms.view.user.others</code></li></ul><p>如果这些检查都返回了 false，则操作会被阻止。</p><h2 id="在玩家浏览-修改权限组时的检查" tabindex="-1">在玩家浏览/修改权限组时的检查 <a class="header-anchor" href="#在玩家浏览-修改权限组时的检查" aria-label="Permalink to &quot;在玩家浏览/修改权限组时的检查&quot;">​</a></h2><h3 id="修改权限组" tabindex="-1">修改权限组 <a class="header-anchor" href="#修改权限组" aria-label="Permalink to &quot;修改权限组&quot;">​</a></h3><p>当玩家尝试用命令修改权限组时，LuckPerms 会先检查 <code>[基础命令权限].modify.[权限组名称]</code>。若返回 true，则允许操作，反之则阻止操作。</p><p>若玩家被检查时未设置相关值（未定义），LuckPerms 会检查 <code>luckperms.modify.group.[权限组名称]</code> 权限并以此来代替原有结果。若两个检查都没能返回 true，则阻止玩家的本次操作。</p><h4 id="示例-4" tabindex="-1">示例 <a class="header-anchor" href="#示例-4" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>例如，如果我们输入命令 <code>/lp group admin clear</code>，LuckPerms 会按顺序检查下列权限：</p><ul><li><code>luckperms.group.clear</code></li><li><code>luckperms.group.clear.modify.admin</code>（若检查到玩家拥有这条权限（无论 true/false），则跳过下一条权限的检查）</li><li><code>luckperms.modify.group.admin</code></li></ul><p>如果这些检查都返回了 false，则操作会被阻止。</p><h3 id="浏览权限组" tabindex="-1">浏览权限组 <a class="header-anchor" href="#浏览权限组" aria-label="Permalink to &quot;浏览权限组&quot;">​</a></h3><p>当玩家尝试用命令浏览权限组数据包时，LuckPerms 会先检查 <code>[基础命令权限].view.[权限组名称]</code>。若返回 true，则允许操作，反之则阻止操作。</p><p>若玩家被检查时未设置相关值（未定义），LuckPerms 会检查 <code>luckperms.view.group.[权限组名称]</code> 权限并以此来代替原有结果。若两个检查都没能返回 true，则阻止玩家的本次操作。</p><h4 id="示例-5" tabindex="-1">示例 <a class="header-anchor" href="#示例-5" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>例如，如果我们输入命令 <code>/lp group admin permission info</code>，LuckPerms 会按顺序检查下列权限：</p><ul><li><code>luckperms.group.permission.info</code></li><li><code>luckperms.group.permission.info.view.admin</code>（若检查到玩家拥有这条权限（无论 true/false），则跳过下一条权限的检查）</li><li><code>luckperms.view.group.admin</code></li></ul><p>如果这些检查都返回了 false，则操作会被阻止。</p><h2 id="在玩家对指定上下文进行修改时的检查" tabindex="-1">在玩家对指定上下文进行修改时的检查 <a class="header-anchor" href="#在玩家对指定上下文进行修改时的检查" aria-label="Permalink to &quot;在玩家对指定上下文进行修改时的检查&quot;">​</a></h2><p>当玩家尝试用命令对数据进行修改时，若修改的数据带有上下文（只能在指定服务器/世界/上下文中生效），LuckPerms 将会检查额外权限。</p><h3 id="修改全局上下文" tabindex="-1">修改全局上下文 <a class="header-anchor" href="#修改全局上下文" aria-label="Permalink to &quot;修改全局上下文&quot;">​</a></h3><p>若改动是针对全局上下文的，LuckPerms 将会先检查 <code>[基础命令权限].usecontext.global</code>。若返回 true，则允许操作，反之则阻止操作。</p><p>若玩家被检查时未设置相关值（未定义），LuckPerms 会检查 <code>luckperms.usecontext.global</code> 权限并以此来代替原有结果。若两个检查都没能返回 true，则阻止玩家的本次操作。</p><h4 id="示例-6" tabindex="-1">示例 <a class="header-anchor" href="#示例-6" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>例如，如果我们输入命令 <code>/lp group admin permission set test.node true</code>，LuckPerms 会按顺序检查下列权限：</p><ul><li><code>luckperms.group.permission.set</code></li><li><code>luckperms.group.permission.set.usecontext.global</code>（若检查到玩家拥有这条权限（无论 true/false），则跳过下一条权限的检查）</li><li><code>luckperms.usecontext.global</code></li></ul><p>如果这些检查都返回了 false，则操作会被阻止。</p><h3 id="修改指定部分上下文" tabindex="-1">修改指定部分上下文 <a class="header-anchor" href="#修改指定部分上下文" aria-label="Permalink to &quot;修改指定部分上下文&quot;">​</a></h3><p>若改动不是在全局上下文进行的，LuckPerms 则会检查下列使用的上下文。</p><p>它会先检查 <code>[基础命令权限].usecontext.[上下文键].[上下文值]</code>。若返回 true，则允许操作，反之则阻止操作。</p><p>若玩家被检查时未设置相关值（未定义），LuckPerms 会检查 <code>luckperms.usecontext.[上下文键].[上下文值]</code> 权限并以此来代替原有结果。若两个检查都没能返回 true，则阻止玩家的本次操作。</p><h4 id="示例-7" tabindex="-1">示例 <a class="header-anchor" href="#示例-7" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>例如，如果我们输入命令 <code>/lp group admin permission set test.node true server=factions world=nether</code>，LuckPerms 会按顺序检查下列权限：</p><ul><li><code>luckperms.group.permission.set</code></li><li><code>luckperms.group.permission.set.usecontext.server.factions</code>（若检查到玩家拥有这条权限（无论 true/false），则跳过下一条权限的检查）</li><li><code>luckperms.usecontext.server.factions</code></li><li><code>luckperms.group.permission.set.usecontext.world.nether</code>（若检查到玩家拥有这条权限（无论 true/false），则跳过下一条权限的检查）</li><li><code>luckperms.usecontext.world.nether</code></li></ul><p>如果这些检查都返回了 false，则操作会被阻止。</p><h2 id="在玩家对指定参数修改时的检查" tabindex="-1">在玩家对指定参数修改时的检查 <a class="header-anchor" href="#在玩家对指定参数修改时的检查" aria-label="Permalink to &quot;在玩家对指定参数修改时的检查&quot;">​</a></h2><p>这些检查是对某些命令使用的，且会根据命令中传递的参数发生变化。</p><p>例如，<code>parent add</code> 命令会基于添加权限组检查额外的权限。</p><p>若输入命令 <code>/lp user Luck parent add admin</code>，除了检查的其他权限以外，LuckPerms 还会检查 <code>luckperms.user.parent.add.admin</code>，这允许你允许玩家使用某个命令，且只能使用特定的参数。</p><p>检查的参数在下文列出。</p><table tabindex="0"><thead><tr><th>命令</th><th>额外的权限检查</th></tr></thead><tbody><tr><td>permission set</td><td>node</td></tr><tr><td>permission unset</td><td>node</td></tr><tr><td>parent add</td><td>group</td></tr><tr><td>parent set</td><td>group</td></tr><tr><td>parent settrack</td><td>group.track</td></tr><tr><td>parent remove</td><td>group</td></tr><tr><td>parent cleartrack</td><td>track</td></tr><tr><td>meta set</td><td>key</td></tr><tr><td>meta unset</td><td>key</td></tr><tr><td>promote</td><td>track.next-group</td></tr><tr><td>demote</td><td>track.old-group</td></tr></tbody></table><h2 id="不判定路线上的等级升级指定玩家" tabindex="-1">不判定路线上的等级升级指定玩家 <a class="header-anchor" href="#不判定路线上的等级升级指定玩家" aria-label="Permalink to &quot;不判定路线上的等级升级指定玩家&quot;">​</a></h2><p>这是个非常常见的问题。你需要做的就是添加这些权限：</p><h3 id="对于-sponge-和-spigot" tabindex="-1">对于 Sponge 和 Spigot： <a class="header-anchor" href="#对于-sponge-和-spigot" aria-label="Permalink to &quot;对于 Sponge 和 Spigot：&quot;">​</a></h3><table tabindex="0"><thead><tr><th>权限</th><th>值</th></tr></thead><tbody><tr><td><code>luckperms.user.promote</code></td><td>true</td></tr><tr><td><code>luckperms.user.promote.*</code> &lt;--- 仅 Sponge 需要</td><td>false</td></tr><tr><td><code>luckperms.user.promote.modify.others</code></td><td>true</td></tr><tr><td><code>luckperms.user.promote.&lt;路线&gt;.*</code></td><td>true</td></tr><tr><td><code>luckperms.user.promote.&lt;路线&gt;.&lt;{所有不能经过或达到的等级权限组}&gt;</code></td><td>false</td></tr></tbody></table><p>表中的最后一个权限中，你需要将所有在该路线无法到达或经过的组用英文花括号 {} 包裹，以英文逗号 <code>,</code> 分隔加入其中。例如，你可以设置 <code>luckperms.user.promote.staff.{admin,owner}</code> 权限来防止其他玩家升级或经过“admin”和“staff”组。</p><p>另外，如果你想要玩家/权限组能够通过全局上下文（无要求）进行升级，你需要添加 <code>luckperms.usecontext.global</code> 权限。</p>',81)]))}const h=r(d,[["render",l]]);export{m as __pageData,h as default};
