import{_ as s,c as i,o as t,b0 as e}from"./chunks/framework.w6NQj85O.js";const k=JSON.parse('{"title":"快速脚本","description":"","frontmatter":{},"headers":[],"relativePath":"WorldEdit/usage.other.craftscripts.md","filePath":"WorldEdit/usage.other.craftscripts.md"}'),l={name:"WorldEdit/usage.other.craftscripts.md"};function r(o,a,d,n,h,p){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="快速脚本" tabindex="-1">快速脚本 <a class="header-anchor" href="#快速脚本" aria-label="Permalink to &quot;快速脚本&quot;">​</a></h1><p>脚本允许你在不学习 Java 的情况下快速完成一些小任务，无需知晓编译 WorldEdit 的方法，或是自行写轮子。需要注意的是快速脚本本身是 JavaScript 写就的。</p><h2 id="要求" tabindex="-1">要求 <a class="header-anchor" href="#要求" aria-label="Permalink to &quot;要求&quot;">​</a></h2><p>在你开始使用快速脚本之前，你需要先安装 <a href="https://github.com/mozilla/rhino/releases" target="_blank" rel="noreferrer">Rhino JavaScript 引擎</a>。直接下载的链接可以<a href="https://github.com/mozilla/rhino/releases/download/Rhino1_7_13_Release/rhino-runtime-1.7.13.jar" target="_blank" rel="noreferrer">点击这里</a>获取。 将下载下来的文件重命名为 <code>js.jar</code>。将 <code>js.jar</code> 放入 <code>plugins/</code> 或 <code>plguins/WorldEdit</code> 文件夹下（对 Bukkit 系核心而言），或者是 <code>mods</code> 文件夹下（对其他种类的核心而言）。</p><h2 id="使用快速脚本" tabindex="-1">使用快速脚本 <a class="header-anchor" href="#使用快速脚本" aria-label="Permalink to &quot;使用快速脚本&quot;">​</a></h2><p>在你安装完 JS 引擎之后，将你的快速脚本 <code>.js</code> 文件放在 <code>craftscripts</code> 文件夹中（在 WorldEdit 配置文件夹中 - 可能是 <code>plugins/WorldEdit</code> 或者 <code>config/WorldEdit</code> 文件夹下，取决于你所使用的服务端核心种类）。</p><p>运行快速脚本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/cs &lt;文件名称&gt; &lt;参数&gt;</span></span>
<span class="line"><span>/.s &lt;参数&gt;</span></span></code></pre></div><p><code>/cs</code> 命令将会执行给定名称的快速脚本（<code>.js</code> 后缀可省略）。每个快速脚本都有它自己的参数。命令 <code>/.s</code> 将会执行你最近执行过的快速脚本。</p><h2 id="编写快速脚本" tabindex="-1">编写快速脚本 <a class="header-anchor" href="#编写快速脚本" aria-label="Permalink to &quot;编写快速脚本&quot;">​</a></h2><p>在 WorldEdit 中编写脚本允许创建能够改变世界的代码，而无需学习 Java 或编译代码。脚本，在 WorldEdit 中被称作“快速脚本”（CraftScripts），它以 JavaScript 的格式写就并存放在你的 craftscripts/ 文件夹下。在 WorldEdit 使用脚本的优点如下：</p><ul><li>直接对接至 WorldEdit 的撤销/重做系统；</li><li>使用 WorldEdit 的方块放置优先级；</li><li>接受 WorldEdit 强大的方块类型格式（<code>//set sign[facing=north]</code>）；</li><li>获取用户的选区。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>推荐你在编写快速脚本之前对 Java 或者 JavaScript 进行一些基本的了解。</p></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>当我们使用 WorldEdit API 编写快速脚本时，对这部分内容的限制并不算多。<br> 进阶用户甚至可以与服务端底层 API（如 Bukkit、NeoForge 等）进行对接。</p></div><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>快速脚本在公共命名空间下有三个变量：</p><ul><li><code>context</code> 为 <a href="https://github.com/EngineHub/WorldEdit/blob/master/worldedit-core/src/main/java/com/sk89q/worldedit/scripting/CraftScriptContext.java" target="_blank" rel="noreferrer">CraftScriptContext</a> 的实例；</li><li><code>player</code> 为触发了该快速脚本的玩家，即一个 <a href="https://github.com/EngineHub/WorldEdit/blob/master/worldedit-core/src/main/java/com/sk89q/worldedit/entity/Player.java" target="_blank" rel="noreferrer">Player</a> 实例；</li><li><code>argv</code> 是一个 Java 的数组字符串，存储了调用脚本以来使用的所有参数。</li></ul><p><strong>操作方块</strong></p><p>所有在 WorldEdit 中的方块编辑都是通过 EditSession 完成的。这个对象会自动处理所有历史和方块放置顺序。若要为自己的快速脚本获取一个编辑选区，你需要使用：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>每次你调用这个方法时，都会获得一个新的 <code>EditSession</code> 对象，所以请确保在编写脚本时只引入一个该对象。若要设置方块，你既要提供一个表示方块种类和一或多个属性的结合内容 <code>BlockState</code>，或一个 <code>BaseBlock</code>，即表示带有可能的额外 NBT 数据的 <code>BlockState</code> 对象，所以请确保在编写脚本时只引入一个该对象。若要设置方块，你既要提供一个表示方块种类和一或多个属性的结合内容。</p><div class="info custom-block"><p class="custom-block-title">示例：将一个方块设置为白色羊毛</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Packages.com.sk89q.worldedit.world.block);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sess.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBlockOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBlockPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), BlockTypes.WHITE_WOOL.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDefaultState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div></div><p>若要获取方块，请在 EditSession 上使用方法 <code>getBlock()</code> 方法。这个方法将会返回一个 <code>BaseBlock</code>。</p><h3 id="处理参数" tabindex="-1">处理参数 <a class="header-anchor" href="#处理参数" aria-label="Permalink to &quot;处理参数&quot;">​</a></h3><p>参数在 <code>argv</code> 变量中传递。若你需要检查玩家提供的参数数量是否正确，你可以使用方法 <code>CraftScriptContext#checkArgs()</code>。将 <code>CraftScriptContext</code> 可通过 <code>CraftScriptContext#checkArgs()</code> 进行基本的参数判断。你也可以使用 <code>WorldEdit.getInstance().getPatternFactory()</code> 和 <code>.getMaskFactory()</code> 直接对接 WorldEdit 的判断器。</p><div class="info custom-block"><p class="custom-block-title">示例：检查参数</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">checkArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;block&gt; [width] [height]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(argv[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div></div><p>如果玩家输入了一个无效方块怎么办？脚本将会抛出一个错误，如果你不尝试捕捉这个错误的话，玩家就会收到这条错误的消息，且脚本也会被强制中止。</p><h3 id="处理-java-包" tabindex="-1">处理 Java 包 <a class="header-anchor" href="#处理-java-包" aria-label="Permalink to &quot;处理 Java 包&quot;">​</a></h3><p>若要导入一个 Java 包，你可以按下列格式进行操作：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Packages.package.name.here);</span></span></code></pre></div><p>你可以导入任何在 Java class 路径中可用的包 - 即使它不与 WorldEdit 相关。</p><h3 id="示例脚本" tabindex="-1">示例脚本 <a class="header-anchor" href="#示例脚本" aria-label="Permalink to &quot;示例脚本&quot;">​</a></h3><p>你可以在 <a href="https://github.com/EngineHub/WorldEdit/tree/master/contrib/craftscripts" target="_blank" rel="noreferrer">WorldEdit 的 Github 仓库</a>找到一些示例脚本。需要注意的是不是所有脚本都会更新以适配最新版本的 WorldEdit API。你可以在 API 章节找到更多有关 WorldEdit API 的描述。</p><h2 id="另见" tabindex="-1">另见 <a class="header-anchor" href="#另见" aria-label="Permalink to &quot;另见&quot;">​</a></h2><ul><li>LocusAzzuro, 2016.3.10, <em>[WorldEdit]CraftScript脚本 - 编写出你想要的WE功能！ [~3200字]</em>, <a href="https://www.mcbbs.net/thread-565465-1-1.html" target="_blank" rel="noreferrer">https://www.mcbbs.net/thread-565465-1-1.html</a></li></ul>`,35)]))}const E=s(l,[["render",r]]);export{k as __pageData,E as default};
