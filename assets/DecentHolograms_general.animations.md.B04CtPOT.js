import{_ as t,c as e,o as s,b0 as l}from"./chunks/framework.w6NQj85O.js";const g=JSON.parse('{"title":"🖼️ 动画","description":"","frontmatter":{},"headers":[],"relativePath":"DecentHolograms/general.animations.md","filePath":"DecentHolograms/general.animations.md"}'),i={name:"DecentHolograms/general.animations.md"};function o(n,a,p,c,d,r){return s(),e("div",null,a[0]||(a[0]=[l(`<h1 id="🖼️-动画" tabindex="-1">🖼️ 动画 <a class="header-anchor" href="#🖼️-动画" aria-label="Permalink to &quot;🖼️ 动画&quot;">​</a></h1><p>如何使用 DecentHolograms 内置的动画</p><p>DecentHolograms 支持两种类型的动画：预制动画与自定义动画。</p><p>自定义动画可以在文件中进行配置，更多内容会在<a href="./general.configuration.animation.html">这里</a>讲到。</p><h2 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-label="Permalink to &quot;格式&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;#ANIM:&lt;名称&gt;&gt;文本&lt;/#ANIM&gt;</span></span>
<span class="line"><span>&lt;#ANIM:&lt;名称&gt;:&lt;参数&gt;&gt;文本&lt;/#ANIM&gt;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">提示</p><p>若要在动画中使用变量，你应该在 <a href="./general.configuration.config.html"><code>config.yml</code></a> 下启用 <code>allow-placeholder-inside-animation</code> 设置，</p></div><h2 id="预制动画" tabindex="-1">预制动画 <a class="header-anchor" href="#预制动画" aria-label="Permalink to &quot;预制动画&quot;">​</a></h2><p>这里有一些你可以使用的预制动画，任何文本都可套用这些格式。</p><h3 id="随机颜色" tabindex="-1">随机颜色 <a class="header-anchor" href="#随机颜色" aria-label="Permalink to &quot;随机颜色&quot;">​</a></h3><p>在所有可用的原版颜色代码之间切换。与 HolographicDisplays 的彩色相似，且也提供了 <code>&amp;u</code> 这样的变量作为另一种使用方法。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;#ANIM:colors&gt;文本&lt;/#ANIM&gt;</span></span></code></pre></div><h3 id="波浪" tabindex="-1">波浪 <a class="header-anchor" href="#波浪" aria-label="Permalink to &quot;波浪&quot;">​</a></h3><p>文本将以 <code>&lt;颜色1&gt;</code> 显示，而 <code>&lt;颜色2&gt;</code> 则会按顺序逐字扫过文本。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;#ANIM:wave:&lt;颜色1&gt;,&lt;颜色2&gt;&gt;文本&lt;/#ANIM&gt;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">示例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;#ANIM:wave:&amp;f,&amp;b&amp;l&gt;文本&lt;/#ANIM&gt;</span></span></code></pre></div></div><h3 id="燃烧" tabindex="-1">燃烧 <a class="header-anchor" href="#燃烧" aria-label="Permalink to &quot;燃烧&quot;">​</a></h3><p>文本将以 <code>&lt;颜色1&gt;</code> 显示，而 <code>&lt;颜色2&gt;</code> 则会按从左到右覆盖文本。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;#ANIM:burn:&lt;color1&gt;,&lt;color2&gt;&gt;文本&lt;/#ANIM&gt;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">示例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;#ANIM:burn:&amp;f,&amp;b&amp;l&gt;文本&lt;/#ANIM&gt;</span></span></code></pre></div></div><h3 id="打字机" tabindex="-1">打字机 <a class="header-anchor" href="#打字机" aria-label="Permalink to &quot;打字机&quot;">​</a></h3><p>文本会在短时间内逐字显示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;#ANIM:typewriter&gt;文本&lt;/#ANIM&gt;</span></span></code></pre></div><h3 id="滚动" tabindex="-1">滚动 <a class="header-anchor" href="#滚动" aria-label="Permalink to &quot;滚动&quot;">​</a></h3><p>将文本切换至滚动显示。长度会被设置为 <code>&lt;文本长度&gt; / 3 * 2</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;#ANIM:scroll&gt;文本&lt;/#ANIM&gt;</span></span></code></pre></div><h2 id="自定义动画" tabindex="-1">自定义动画 <a class="header-anchor" href="#自定义动画" aria-label="Permalink to &quot;自定义动画&quot;">​</a></h2><p>自定义动画以 YAML 的格式存储在插件的 <code>animations</code> 文件夹中，可以通过与<a href="#预制动画">预制动画</a>相同的格式引用。</p><p>但是与与预制动画不同的一点是，你不能使用额外的选项来自定义动画。你能做到的只有在行内使用 <code>{text}</code> 内建变量来显示 <code>&lt;#ANIM&gt;</code> 标签包含的文本。</p><p>示例动画文件会在插件初次安装时生成，你也可以在<a href="./general.configuration.animation.html">这个章节</a>找到它。</p>`,30)]))}const u=t(i,[["render",o]]);export{g as __pageData,u as default};
