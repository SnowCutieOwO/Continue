import{_ as a,c as t,o,b0 as r}from"./chunks/framework.w6NQj85O.js";const u=JSON.parse('{"title":"交易记录","description":"","frontmatter":{},"headers":[],"relativePath":"Shopkeepers/other-features.trade-logging.md","filePath":"Shopkeepers/other-features.trade-logging.md"}'),i={name:"Shopkeepers/other-features.trade-logging.md"};function d(n,e,s,c,l,h){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="交易记录" tabindex="-1">交易记录 <a class="header-anchor" href="#交易记录" aria-label="Permalink to &quot;交易记录&quot;">​</a></h1><p>目前只支持将交易记录存储至插件文件夹下的 CSV 文件。尚不支持将日志记录至 SQL 数据库，或在游戏内浏览交易历史。</p><h2 id="csv-交易记录" tabindex="-1">CSV 交易记录 <a class="header-anchor" href="#csv-交易记录" aria-label="Permalink to &quot;CSV 交易记录&quot;">​</a></h2><p>这个功能可以在配置文件的 <code>log-trades-to-csv</code>（默认禁用）处开启。启用后，插件会将交易存储在 <code>trade-logs</code> 文件夹下的 CSV 文件中。</p><p>若要防止 IO 读写操作堵塞服务器主线程，我们会记录在批处理文件中的交易记录：当交易发生时，我们会在将其记录进文件或其他后续交易发生前等待 30-45 秒（取决于额外的交易合并时间，见下）。</p><h3 id="数据格式" tabindex="-1">数据格式 <a class="header-anchor" href="#数据格式" aria-label="Permalink to &quot;数据格式&quot;">​</a></h3><p>交易会按日期分类：每个 CSV 文件分别存储一天之内发生的交易。当前，所有日期与时间信息都基于服务器选择的时区。</p><p>CSV 的时间格式可能不固定。如果你编写了自动处理这些文件的工具，你可能需要在时间格式更新之后修改程序的代码。</p><h3 id="物品元数据" tabindex="-1">物品元数据 <a class="header-anchor" href="#物品元数据" aria-label="Permalink to &quot;物品元数据&quot;">​</a></h3><p>默认情况下，为了减小日志文件的体积，我们只记录参与交易的物品类型。设置 <code>log-item-metadata</code>（默认为 <code>false</code>）会让日志记录物品的元数据，例如示例的物品显示名称、描述等。</p><p>物品元数据为基于 Bukkit 物品序列化的紧凑 YAML 格式。见<a href="./more-information.item-serialization">物品序列化</a>了解更多。</p><h3 id="交易合并" tabindex="-1">交易合并 <a class="header-anchor" href="#交易合并" aria-label="Permalink to &quot;交易合并&quot;">​</a></h3><p>若要让记录的日志更为紧凑，我们会将一段时间内产生的相似交易合并为一条。</p><p>默认情况下，我们只会合并 15 秒内的多条相似交易，且这些交易的产生间隔不得大于 5 秒。设置 <code>trade-log-merge-duration-ticks</code> 与 <code>trade-log-next-merge-timeout-ticks</code> 控制着上述行为。它们也可以用于禁用交易日志合并。见<a href="./installtion-updating.configuration">配置文件</a>了解更多。</p>',14)]))}const g=a(i,[["render",d]]);export{u as __pageData,g as default};
