import{_ as o,c as a,o as d,b0 as c}from"./chunks/framework.w6NQj85O.js";const u=JSON.parse('{"title":"菜单","description":"","frontmatter":{},"headers":[],"relativePath":"AureliumSkills/configuration.menu.md","filePath":"AureliumSkills/configuration.menu.md"}'),t={name:"AureliumSkills/configuration.menu.md"};function i(l,e,r,n,p,s){return d(),a("div",null,e[0]||(e[0]=[c('<h1 id="菜单" tabindex="-1">菜单 <a class="header-anchor" href="#菜单" aria-label="Permalink to &quot;菜单&quot;">​</a></h1><p>修改和自定义个性化菜单的教程。</p><p>在本插件中，菜单是向玩家在游戏内显示技能信息的界面。该界面还包括了属性菜单和技能内容、技能升级进度、能力描述。一些菜单可直接使用诸如 <code>/skills</code> 或 <code>/stats</code> 的命令开启，而有些菜单只能通过点击这些菜单中的按钮来打开。</p><p>因为菜单更新显著地改变了本插件的配置格式并添加了新的内容，该章节面向使用 Beta 1.3.0 或更高版本的用户。若你还在使用低版本并已熟悉了旧版本的菜单配置格式，那么你需要参阅本维基的下一章节。</p><h2 id="文件结构" tabindex="-1">文件结构 <a class="header-anchor" href="#文件结构" aria-label="Permalink to &quot;文件结构&quot;">​</a></h2><p>负责配置菜单的文件位于插件的 <code>AureliumSkills/menus</code> 文件夹下。每个菜单都有其对应的文件，用以控制菜单的显示内容。</p><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><p>本插件的许多文档都使用到了变量，通常以 <code>{变量}</code> 的形式表示。当菜单被开启时，这些变量就会被消息文本中的对应信息所替换。变量对应的文本路径通常在语言文本的 <code>menus.common</code> 或 <code>menus.[menu_name]</code>，具体名称大致与变量名相似。</p><p>但是，部分变量由于其更强的泛用性，而不会出现在消息文本或菜单配置区域。例如，变量 <code>{skill}</code> 就会被技能的名称所替代。</p><p>我们非常建议对消息文件里的变量所对应的文本进行改动，这样对保持多语言支持有益。对内建变量本身的修改会使其无效化。</p><h3 id="菜单键名" tabindex="-1">菜单键名 <a class="header-anchor" href="#菜单键名" aria-label="Permalink to &quot;菜单键名&quot;">​</a></h3><p>下列键名是菜单配置文件中处于最左侧（没有缩进）的键名（此处称菜单部分）。</p><ul><li><code>title</code> - 打开菜单时显示的标题。</li><li><code>size</code> - 菜单行数。只能使用 1-6 之间的数字，例如 1 代表一行九格。</li><li><code>fill</code> - 填充菜单空白区域的物品名称，具体内容请见菜单格式改动[注1]。</li><li><code>items</code> - 用于单个按钮的配置部分。</li><li><code>templates</code> - 自定义物品内容及多个示例的部分。</li><li><code>options</code> - 部分菜单文件中存在的，用以控制其他自定义设置的部分。</li></ul><h3 id="填充物品" tabindex="-1">填充物品 <a class="header-anchor" href="#填充物品" aria-label="Permalink to &quot;填充物品&quot;">​</a></h3><p>填充（<code>fill</code>）区域是决定填充其他物品不使用位置内容的设置。该项通常有两个键名：</p><ul><li><code>enabled</code> - 是否启用该功能</li><li><code>material</code> - 填充物的材质</li></ul><p>填充物品的展示名称会被自动替换为空格，所以物品名称是不可见的。与其他物品相同格式的额外键名可以添加至此，以用来自定义其他的物品数据（见此[注1]）。</p><h3 id="物品设置区域" tabindex="-1">物品设置区域 <a class="header-anchor" href="#物品设置区域" aria-label="Permalink to &quot;物品设置区域&quot;">​</a></h3><p>物品（<code>item</code>）是用来配置菜单中单个物品的区域。每个子区域都包含物品的唯一ID，即它们的独特名称。在默认菜单中存在的物品名称是保留词，意味着这些名称被插件所使用，用以替换变量名称或拥有其他的功能。自定义物品可以以非保留词的 ID 命名添加，格式与其他的物品相同。见添加自定义物品章节来获取更多信息。</p><h3 id="模板设置区域" tabindex="-1">模板设置区域 <a class="header-anchor" href="#模板设置区域" aria-label="Permalink to &quot;模板设置区域&quot;">​</a></h3><p>模板区域用来设置包含多个相同内容的物品，例如技能菜单中显示的物品。模板物品通常有相同的描述和名称，通过其中插入的变量在不同菜单中被区分。模板中的每个内容都包含不同之处，例如技能的种类，以使每个单独的内容显示都不尽相同。下列示例配置显示了一个模板的基本结构。</p><p>templates: # 模板设置区域 skill: # 技能菜单模板 farming: # 对于农耕技能菜单，该物品的变化 pos: ... # 该部分仅修改农耕技能的相关物品 material: ... foraging: # 该部分仅修改锻造技能的相关物品 pos: ... material: ... # 不会添加至所有内容的物品任意键名 display_name: ... # 对所有内容生效 lore: ... # 对所有内容生效</p><p>鉴于模板仅对已经有定义的物品生效，自定义模板是无效的。</p><h2 id="物品" tabindex="-1">物品 <a class="header-anchor" href="#物品" aria-label="Permalink to &quot;物品&quot;">​</a></h2><p>物品同时指物品（<code>items</code>）和模板（<code>templates</code>）区域中的物品，大多数的键对这两者均生效。这里有两个对大多数物品和模板而言必需的键：</p><ul><li><code>material</code> - 物品材料名称，例如 <code>dirt</code> 或 <code>diamond</code>，更多细节见下。</li><li><code>pos</code> - 物品所处的菜单位置，可以为以逗号分隔的 <code>行,列</code> 值，或是单个的格子位置数字（处于 1-53 间），更多细节见下。</li></ul><h3 id="材料名" tabindex="-1">材料名 <a class="header-anchor" href="#材料名" aria-label="Permalink to &quot;材料名&quot;">​</a></h3><p>材料名称是大多数菜单物品和大部分模板所要求的输入的物品种类定义。在 1.13+ 的 Minecraft，物品的 ID 可通过在游戏内按下 F3+H 并查看对应物品的悬浮框得到，即下方以暗灰色 <code>minecraft:</code> 字样后方的内容。以大写字母开头的小写字母名称同样可被接受。</p><p>在 1.12 的 Minecraft 中，部分物品有着附加值（数字），用以定义不同颜色的染色羊毛、玻璃或是不同种类的原木，该数据值以 <code>材料:数据值</code> 的格式加在材料名称末尾。数据值也可在游戏内使用高级工具栏查看，具体是数字 ID 后以 # 开头的一串数字。附加值为 0 的物品无需在配置文本中再次添加。</p><p>在模板中，材料既可以在内容分支下定义，也可以在主物品栏目下定义。所决定材料的内容只会在游戏中对应的菜单生效，若定义在主物品栏目下，未指定内容的材料名会以此为准。</p><h3 id="物品位置" tabindex="-1">物品位置 <a class="header-anchor" href="#物品位置" aria-label="Permalink to &quot;物品位置&quot;">​</a></h3><p>位置（<code>pos</code>）是决定物品在菜单所处位置的值。该内容下有两种格式的参数可选：</p><p><strong>行列格式</strong> 该格式的写法通常为 <code>行,列</code>，例如参数 <code>2,3</code> 代表菜单里的第 1 行第 2 列。第一行/列从 0 开始计数。<br> 行范围是 0-5，而列范围则是 0-8。第 0 行是 GUI 界面中最顶端的一行，第 0 列则是 GUI 界面中最左侧的一列。</p><p><strong>序号格式</strong> 该格式是为 0-53 范围的整数，代表 GUI 中格子的序号。第 0 格在菜单的左上角，从左至右序号递增，从上至下也递增。</p><h3 id="显示名称与自定义描述" tabindex="-1">显示名称与自定义描述 <a class="header-anchor" href="#显示名称与自定义描述" aria-label="Permalink to &quot;显示名称与自定义描述&quot;">​</a></h3><p><code>display_name</code> 参数后的内容决定了物品的显示名称，支持嵌入彩色代码和变量。<br><code>lore</code> 参数后的内容决定了物品的描述文本，同样支持嵌入彩色代码和变量。<br> 显示名称与描述键也包含以 <code>{变量}</code> 的形式表示的内建变量。这些变量被预先嵌入文本，以配合插件展示完整功能。消息文本通常也对应消息配置文件中键名相似的内容。</p><p><strong>16进制色码</strong> 显示名称与描述中也支持使用类似 <code>&amp;#000000</code> 的 <a href="https://docs.adventure.kyori.net/minimessage/format.html" target="_blank" rel="noreferrer">MiniMessage</a> 彩色字格式。</p><h3 id="物品元数据值" tabindex="-1">物品元数据值 <a class="header-anchor" href="#物品元数据值" aria-label="Permalink to &quot;物品元数据值&quot;">​</a></h3><p>这里有很多种键来定义不同种类的物品元数据。这些键位于物品设置内容，不在 <code>material</code>，而是与该键同级。</p><p><strong>附魔</strong><br> 附魔（<code>enchantments</code>）是按照格式排列，存有附魔顺序的一个列表，例如：</p><p>enchantments:</p><ul><li>sharpness 5</li><li>unbreaking 3</li></ul><p>其中使用的名称即为原版游戏使用的附魔名称。</p><p><strong>药水数据值</strong><br> 药水数据值（<code>potion_data</code>）部分包含几个子键，用以决定药水的数据。如下列内容所示：</p><ul><li><code>type</code> - 药水种类名称，例如 <code>speed</code> 或 <code>night_vision</code>。种类名称需为有效的 Bukkit 药水种类名称（PotionType）（在<a href="https://helpch.at/docs/1.18/org/bukkit/potion/PotionType.html" target="_blank" rel="noreferrer">此处</a>列出）</li><li><code>extended</code> - 药水是否有延长时间的效果（原版萤石效果）（默认为 false）</li><li><code>upgraded</code> - 药水是否有提升等级的效果（原版红石效果）（默认为 false）</li></ul><p>一个 <code>potion_data</code> 区域的示例，带有上述的三个键名：</p><p>potion_data: type: night_vision extended: true upgraded: true</p><p><strong>自定义效果</strong><br> 自定义效果部分是一个包含多个元素的映射表，用于设置药水的自定义效果（与药水数据值不同）。每个在映射表中的元素均需包含三个键：</p><ul><li>type - 该效果使用的名称，必须是有效的 Bukkit 药水效果名称（PotionEffectType）（在<a href="https://helpch.at/docs/1.18/org/bukkit/potion/PotionEffectType.html" target="_blank" rel="noreferrer">此处</a>列出）。</li><li>duration - 药水持续时间，单位为刻（20 刻 = 1 秒）。</li><li>amplifier - 药水效果等级，填写 0 表示药水效果为 1 级。</li></ul><p>下列是一个使用了 <code>custom_effects</code>，包含多个自定义效果（10 秒的抗火 I 和 30 秒的急迫 II）：</p><p>custom_effects:</p><ul><li>type: fire_resistance duration: 200 amplifier: 0</li><li>type: fast_digging duration: 600 amplifier: 1</li></ul><p><strong>物品标签</strong><br> 标签（<code>flags</code>）是一个添加至物品的标签列表。物品标签是一些用于隐藏特定内容使其不向玩家显示的数据。下列是一个可在物品配置中使用的有效标签列表：</p><p>flags:</p><ul><li>hide_attributes</li><li>hide_destroys</li><li>hide_dye</li><li>hide_enchants</li><li>hide_placed_on</li><li>hide_potion_effects</li><li>hide_unbreakable</li></ul><p><strong>发光</strong><br> 发光（<code>glow</code>）部分是一个填入布尔值的位置，当设置为 true 时，物品可在没有附魔的情况下发光。该操作与添加一个附魔并在该物品上使用 <code>hi de_enchants</code> 标签等价。</p><p><strong>头颅数据</strong><br> 头颅数据值（<code>skull_meta</code>）在物品为玩家头颅时可决定头颅的自定义皮肤。该部分设置需包含 <code>uuid</code>、<code>base64</code> 或 <code>url</code> 三个中的一个子键。</p><p><code>uuid</code> 是需要使用皮肤玩家的 UUID。<code>base64</code> 是一串材质的 base64 码。<code>url</code> 则是 minecraft.net 官网下对应的皮肤链接。</p><p>下方是一个使用本功能的配置示例，你只需要三个子键中的一个。</p><p>skull_meta: uuid: 6302a69e-9995-4f95-b2cd-d37b8ab875c9 base64: eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNjIxMTk3ZTUzYzFhYjExMmU2ODA3OWQzYzgzZmE0NzE0Yzc3YTgzZDA2MjFhMjlkNzYyZTk5ZTlmZWFhZTRkNSJ9fX0= url: <a href="http://textures.minecraft.net/texture/621197e53c1ab112e68079d3c83fa4714c77a83d0621a29d762e99e9feaae4d5" target="_blank" rel="noreferrer">http://textures.minecraft.net/texture/621197e53c1ab112e68079d3c83fa4714c77a83d0621a29d762e99e9feaae4d5</a></p><p><strong>耐久值</strong><br> 耐久值（<code>durability</code>）用于设置物品的耐久值，可设定的值范围取决于物品的最大耐久（0 意味着物品即将损坏）。</p><p><strong>NBT 数据</strong><br> 使用 <code>nbt</code> 部分配置可将 NBT 数据添加至物品。该设置支持复杂 NBT 结构，并会自动检测输入的数据种类。</p><p><strong>注册物品 ID</strong><br> 注册物品 ID（<code>key</code>）用于指代在游戏中通过命令 <code>/skills item register</code> 注册的物品。在该项设置后，<code>material</code> 和其他数据都会无效。该设置适合对游戏中已创建的物品或过于复杂的物品使用。</p><h3 id="自定义模型数据" tabindex="-1">自定义模型数据 <a class="header-anchor" href="#自定义模型数据" aria-label="Permalink to &quot;自定义模型数据&quot;">​</a></h3><p>可在 NBT 数据区域以下方格式添加自定义模型数据：</p><p>some_item: nbt: CustomModelData: 123</p><p>该内容跟随原版储存自定义模型数据的格式。</p><h3 id="点击操作" tabindex="-1">点击操作 <a class="header-anchor" href="#点击操作" aria-label="Permalink to &quot;点击操作&quot;">​</a></h3><p>点击操作可用于在玩家点击菜单物品的时候触发自定义操作。这包括了执行命令、关闭菜单、打开另一个菜单等更多操作。</p><p><strong>触发种类</strong><br> 这里有多种插件能识别的操作类型（括号中的为配置文本实际使用的内容）：</p><ul><li>鼠标单击（<code>on_click</code>）</li><li>鼠标左键点击（<code>on_left_click</code>）</li><li>鼠标右键点击（<code>on_right_click</code>）</li><li>鼠标中键点击（<code>on_middle_click</code>）</li><li>键盘 Q 键（<code>on_drop</code>）</li></ul><p>触发操作用于命名玩家以特定动作点击时触发操作的列表名称。例如，当玩家点击菜单物品时，配置中对应 <code>on_click</code> 部分的内容都会被激活。</p><p><strong>种类</strong><br> 当你创建的物品下包含了触发种类的名称，点击操作就需要以映射列表的形式添加。<br> 每个操作都需要预先决定种类，无论是 <code>command</code>（执行命令）或是 <code>menu</code>（打开菜单）。</p><p><strong>命令</strong><br> 执行命令操作时，执行方（<code>executor</code>，可以为控制台（<code>console</code>）或玩家（<code>player</code>））和执行命令的内容为必填项。控制台（<code>console</code>）身份会从后台为玩家执行命令，而玩家（<code>player</code>）身份则通过玩家本身执行命令（会检查玩家是否拥有相应权限，若无则不会执行）。<br> 执行的命令（<code>command</code>）内容不需要带斜杠。支持在命令参数中填入内建变量和 PlaceholderAPI 的变量。</p><p><strong>菜单</strong><br> 菜单操作与菜单跳转有关。你必须要在使用对应的操作前指定操作参数，如下列表所示：</p><ul><li>open - 打开本插件内的其他菜单。</li><li>close - 关闭当前菜单</li><li>next_page - 若可以，那么移动到菜单的下一页。</li><li>previous_page - 若可以，那么移动到菜单的上一页。</li></ul><p>开启（<code>open</code>）操作必须指定菜单名称（<code>menu</code>）值，用以表示索要打开菜单的内部名称（该名称通常以下划线代替空格的小写名称表示）<br> 开启（<code>open</code>）、下一页（<code>next_page</code>）和上一页（<code>previous_page</code>）有一个额外的 <code>properties</code> 内容用以设定菜单行为，该部分较为深奥，除非你深挖源代码，否则你应该不会知道这部分设置的作用。</p><p><strong>示例</strong><br> 以鼠标单击激活的命令操作，通过控制台执行的示例：</p><p>some_item: on_click: - type: command executor: console command: say hi</p><p>仅在鼠标右键单击时激活关闭菜单操作的示例：</p><p>some_item: on_right_click: - type: menu action: close</p><p>使用同一个触发器的多个单击操作（按顺序执行）示例：</p><p>some_item: on_click: - type: command executor: player command: shop - type: command executor: console command: say Player opened shop</p><h2 id="自定义菜单物品" tabindex="-1">自定义菜单物品 <a class="header-anchor" href="#自定义菜单物品" aria-label="Permalink to &quot;自定义菜单物品&quot;">​</a></h2><p>全新的物品可通过在 <code>items</code> 下添加以物品名称命名的设置部分来创建。自定义物品不能为已经存在的内建物品名称。<br> 自定义物品的格式与其他物品完全相同（包括 material、pos、display_name、lore 等）。对这些物品设置自定义点击操作，或是插入 PlaceholderAPI 的变量都是可以的。</p>',85)]))}const m=o(t,[["render",i]]);export{u as __pageData,m as default};
