import{_ as i,c as a,o as e,b0 as t}from"./chunks/framework.w6NQj85O.js";const r=JSON.parse('{"title":"方块","description":"","frontmatter":{},"headers":[],"relativePath":"WorldEdit/developer-api.api-concepts.blocks.md","filePath":"WorldEdit/developer-api.api-concepts.blocks.md"}'),p={name:"WorldEdit/developer-api.api-concepts.blocks.md"};function l(o,s,n,k,h,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="方块" tabindex="-1">方块 <a class="header-anchor" href="#方块" aria-label="Permalink to &quot;方块&quot;">​</a></h1><p>方块数据被分为两部分，<em>类型</em>与<em>状态</em>。这些通过 <code>BlockType</code> 和 <code>BlockState</code> 类表示。方块种类的例子是 <code>minecraft:oak_log</code>，状态为分类 <code>minecraft:oak_log</code> 和<em>属性</em> <code>[axis=y]</code>。</p><p>你可以在 <code>BlockType</code> 中通过方法 <code>getDefaultState()</code> 或提供正确的属性映射表至 <code>getState(Map)</code> 方法中获得 <code>BlockStates</code> 对象。</p><p>例如，获取 <code>minecraft:oak_log[axis=y]</code> 的状态：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BlockType oakLog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Objects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requireNonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BlockTypes.OAK_LOG);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BlockState yFacingOakLog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oakLog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ImmutableMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oakLog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;axis&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;y&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.err.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;State: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yFacingOakLog);</span></span></code></pre></div><p>部分方块包含 NBT 数据，它们是通过 <code>BaseBlock</code> 类型表示的。</p><p>你可以通过 <code>toBaseBlock(CompoundTag)</code> 方法从 <code>BlockState</code> 获取 <code>BaseBlock</code>。</p>`,7)]))}const E=i(p,[["render",l]]);export{r as __pageData,E as default};
