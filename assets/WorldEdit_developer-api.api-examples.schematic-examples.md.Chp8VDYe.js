import{_ as i,c as a,o as e,b0 as t}from"./chunks/framework.w6NQj85O.js";const E=JSON.parse('{"title":"结构示例","description":"","frontmatter":{},"headers":[],"relativePath":"WorldEdit/developer-api.api-examples.schematic-examples.md","filePath":"WorldEdit/developer-api.api-examples.schematic-examples.md"}'),l={name:"WorldEdit/developer-api.api-examples.schematic-examples.md"};function p(n,s,h,d,r,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="结构示例" tabindex="-1">结构示例 <a class="header-anchor" href="#结构示例" aria-label="Permalink to &quot;结构示例&quot;">​</a></h1><p>该部分主要讲述结构有关的内容。结构通常指保存的剪贴板内容，而不是内存中的剪贴板。</p><h3 id="保存" tabindex="-1">保存 <a class="header-anchor" href="#保存" aria-label="Permalink to &quot;保存&quot;">​</a></h3><p><code>Clipboard</code> 对象可以简单地保存至本地。你所要准备的就是一个 <code>ClipboardFormat</code>，一个 <code>Clipboard</code> 和一个 <code>OutputStream</code>。之后，你可以按格式调用 <code>getWriter</code> 并在其上以你的 <code>Clipboard</code> 进行 <code>write</code> 操作。下文为将剪贴板保存为文件的示例：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">File file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 需要保存至剪贴板的内容 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ClipboardWriter writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BuiltInClipboardFormat.SPONGE_SCHEMATIC.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clipboard);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="载入" tabindex="-1">载入 <a class="header-anchor" href="#载入" aria-label="Permalink to &quot;载入&quot;">​</a></h3><p>载入一个 <code>Clipboard</code> 也很简单。你可以强制指定一个 <code>ClipboardFormat</code>，或让 WorldEdit 自行发现你想要载入的结构文件。示例如下文所示。之后你就可以在格式上调用 <code>getReader</code>，并在读取器上执行 <code>read</code> 方法，以获取一个 <code>Clipboard</code> 实例。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Clipboard clipboard;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ClipboardFormat format </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClipboardFormats.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findByFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ClipboardReader reader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> format.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clipboard </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 在这里使用剪贴板 */</span></span></code></pre></div>`,8)]))}const c=i(l,[["render",p]]);export{E as __pageData,c as default};
