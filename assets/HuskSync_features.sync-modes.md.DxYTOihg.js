import{_ as s,c as i,o as a,b0 as o}from"./chunks/framework.w6NQj85O.js";const c="/assets/system-diagram.DiabfSPY.png",_=JSON.parse('{"title":"同步模式","description":"","frontmatter":{},"headers":[],"relativePath":"HuskSync/features.sync-modes.md","filePath":"HuskSync/features.sync-modes.md"}'),d={name:"HuskSync/features.sync-modes.md"};function l(t,e,n,r,p,h){return a(),i("div",null,e[0]||(e[0]=[o('<h1 id="同步模式" tabindex="-1">同步模式 <a class="header-anchor" href="#同步模式" aria-label="Permalink to &quot;同步模式&quot;">​</a></h1><p>HuskSync 提供了两种分别使用 Redis 和 MySQL 的数据同步模式使得玩家可以跨服读取数据（见下）。这些同步模式会改变数据在服务器间的同步方法，可以在 <code>config.yml</code> 下修改。</p><p><img src="'+c+`" alt="img"></p><h2 id="可用模式" tabindex="-1">可用模式 <a class="header-anchor" href="#可用模式" aria-label="Permalink to &quot;可用模式&quot;">​</a></h2><ul><li><code>LOCKSTEP</code> 同步模式为默认模式。它会使用一个检查系统，来确保所有服务器不会因网络拥堵或环境波动而无法同步数据。该模式是 HuskSync 3.1 引入的，并在 3.2 及之后的版本成为了默认设置。</li><li><code>DELAY</code> 同步模式使用了 <code>network_latency_miliseconds</code> 设置值来在监听 Redis 数据前添加延时。 你可以在 <code>config.yml</code> 下 <code>synchronization</code> 的 <code>sync_mode</code> 修改你所使用的同步模式。</li></ul><div class="warning custom-block"><p class="custom-block-title">警告</p><p>群组下的所有服务器应当使用相同的同步模式（至少是在一个集群中）。</p></div><h3 id="在配置文本中修改同步模式" tabindex="-1">在配置文本中修改同步模式 <a class="header-anchor" href="#在配置文本中修改同步模式" aria-label="Permalink to &quot;在配置文本中修改同步模式&quot;">​</a></h3><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">synchronization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 所使用的数据同步模式 (LOCKSTEP 或 DELAY). 推荐大多数服务器核心使用 LOCKSTEP. 相关文件: https://william278.net/docs/husksync/sync-modes</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LOCKSTEP</span></span></code></pre></div><h2 id="步进同步模式" tabindex="-1">步进同步模式 <a class="header-anchor" href="#步进同步模式" aria-label="Permalink to &quot;步进同步模式&quot;">​</a></h2><p><code>LOCKSTEP</code> 同步模式工作方式如下：</p><ul><li>当一个玩家进入服务器后，服务器将会持续检查是否存在 <code>DATA_CHECKOUT</code> 密钥。 <ul><li>在该密钥不存在的情况下，插件会为玩家设置一个新的 <code>DATA_CHECKOUT</code> 密钥。</li></ul></li><li>在此之后，插件将会检查 Redis 数据库中是否存在相同的 <code>DATA_UPDATE</code> 密钥。 <ul><li>若 <code>DATA_UPDATE</code> 存在，则该玩家对应该密钥的数据会从 Redis 数据库中的反序列化快照读取。</li><li>否则就会从数据库中读取数据。</li></ul></li><li>当玩家离开服务器，数据会带着 <code>DATA_UPDATE</code> 密钥序列化后存入 Redis 服务器。在设置完该密钥后，玩家当前的 <code>DATA_CHECKOUT</code> 密钥就会从 Redis 服务器中去除。</li></ul><p>需要注意的是，<code>DATA_CHECKOUT</code> 表示数据是否“被检查”，且会附上服务器 ID（取自 <code>server.yml</code> 配置文件）。在服务器关闭或重启时，插件将会清除当前服务器 ID 下对应的所有 <code>DATA_CHECKOUT</code> 密钥（来防止因服务器崩溃等事件导致的密钥过期）</p><p><code>LOCKSTEP</code> 自 HuskSync 3.2 以来成为本插件的默认设置，大多数服务器推荐使用该模式。</p><h2 id="延时同步模式" tabindex="-1">延时同步模式 <a class="header-anchor" href="#延时同步模式" aria-label="Permalink to &quot;延时同步模式&quot;">​</a></h2><p><code>DELAY</code> 同步模式的原理如下：</p><ul><li>当玩家离开服务器时，一个 <code>SERVER_SWITCH</code> 密匙会立即在 Redis 服务器上生成，缀有 <code>DATA_UPDATE</code> 密钥，其中包含了玩家序列化后的打包数据快照。</li><li>当玩家连接至服务器的时候，他们会被标记为锁定（禁止破坏方块、使用容器等）</li><li>服务器会自动等待配置文件中设置的 <code>network_latency_milliseconds</code> 时间长度（默认为 500 毫秒）使得源服务器器能序列化并设置他们的密钥。</li><li>在等待时间结束后，服务器会检查 <code>SERVER_SWITCH</code> 密钥。 <ul><li>若存在，插件将会继续读取 <code>DATA_UPDATE</code> 密钥；在读取之后，他们的数据会从 Redis 数据库中的反序列化快照中读取。</li><li>若不存在，他们的数据会从数据库读取（如同他们加入了群组服一般）</li></ul></li></ul><p>若你的群组服出现了环境搏动或显著的网络延迟（尤其是在不同硬件/位置运行的服务器），你可能更需要使用 <code>LOCKSTEP</code>，而不是费劲寻找一个更可靠的同步系统。</p>`,17)]))}const k=s(d,[["render",l]]);export{_ as __pageData,k as default};
