import{_ as i,c as a,o as n,b0 as t}from"./chunks/framework.w6NQj85O.js";const o=JSON.parse('{"title":"数据快照 API","description":"","frontmatter":{},"headers":[],"relativePath":"HuskSync/developers.api-v3.data-snapshot-api.md","filePath":"HuskSync/developers.api-v3.data-snapshot-api.md"}'),h={name:"HuskSync/developers.api-v3.data-snapshot-api.md"};function l(e,s,k,p,E,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="数据快照-api" tabindex="-1">数据快照 API <a class="header-anchor" href="#数据快照-api" aria-label="Permalink to &quot;数据快照 API&quot;">​</a></h1><p>HuskSync 3.0 提供了获取、创建、编辑与删除指定玩家一段时间内 <code>DataSnapshot</code> 的 API。本章节将会带你浏览如何通过 HuskSync API 删除快照。</p><p>在阅读本章节时，默认你已阅读了 <a href="./developers.api-v3">API</a> 介绍页，并已向你的项目中导入了 HuskSync（v3.x）依赖。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ol><li><a href="#1-获取玩家">获取玩家</a></li><li><a href="#2-获取玩家的数据快照">获取玩家的数据快照</a><ol><li><a href="#21-获取玩家的当前数据">获取玩家的当前数据</a></li><li><a href="#22-获取用户最后保存的数据快照">获取玩家最后保存的数据快照</a></li><li><a href="#23-获取玩家已保存的数据快照">获取玩家已保存的数据快照</a></li></ol></li><li><a href="#3-数据快照的打包与解包">数据快照的打包与解包</a></li><li><a href="#4-获取和设置数据快照内的数据">获取和设置数据快照中的数据</a><ol><li><a href="#41-数据类型">数据类型</a></li><li><a href="#42-编辑生命值饥饿度经验值和游戏模式数据">编辑生命值、饱食度、经验值和游戏模式数据</a></li><li><a href="#43-编辑背包和末影箱数据">编辑背包和末影箱数据</a></li><li><a href="#44-编辑位置数据">编辑位置数据</a></li></ol></li><li><a href="#5-创建新的数据快照">创建新的数据快照</a><ol><li><a href="#51-从玩家当前数据中创建新快照">从玩家当前数据中创建新的快照</a></li><li><a href="#52-从零创建新快照">从零创建新的快照</a></li></ol></li><li><a href="#6-删除数据快照">删除数据快照</a></li></ol><h2 id="_1-获取玩家" tabindex="-1">1. 获取玩家 <a class="header-anchor" href="#_1-获取玩家" aria-label="Permalink to &quot;1. 获取玩家&quot;">​</a></h2><ul><li>HuskSync 有一个 <code>User</code> 对象，代表储存在数据库中的玩家对象。你可以通过方法 <code>HuskSyncAPI#getUser(uuid)</code> 来获取玩家对象。</li></ul><h3 id="代码示例——通过-uuid-获取玩家对象" tabindex="-1">代码示例——通过 UUID 获取玩家对象 <a class="header-anchor" href="#代码示例——通过-uuid-获取玩家对象" aria-label="Permalink to &quot;代码示例——通过 UUID 获取玩家对象&quot;">​</a></h3><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// getUser() returns a CompletableFuture supplying an Optional&lt;User&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optionalUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Check if we found a user by that UUID either online or on the database</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (optionalUser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // If we didn&#39;t, we&#39;ll log that they don&#39;t exist</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User does not exist!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The User object provides methods for getting a user&#39;s UUID and username</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Found %s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, optionalUser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>若你有一个 <code>org.bukkit.Player</code> 对象，你可以使用 <code>BukkitPlayer#adapt(player)</code> 来获取 <code>OnlineUser</code>（继承 <code>User</code>），代表一个已登入的玩家。</li></ul><h3 id="代码示例——获取在线玩家" tabindex="-1">代码示例——获取在线玩家 <a class="header-anchor" href="#代码示例——获取在线玩家" aria-label="Permalink to &quot;代码示例——获取在线玩家&quot;">​</a></h3><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get an online user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OnlineUser user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(player);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, %s!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h2 id="_2-获取玩家的数据快照" tabindex="-1">2. 获取玩家的数据快照 <a class="header-anchor" href="#_2-获取玩家的数据快照" aria-label="Permalink to &quot;2. 获取玩家的数据快照&quot;">​</a></h2><h3 id="_2-1-获取玩家的当前数据" tabindex="-1">2.1 获取玩家的当前数据 <a class="header-anchor" href="#_2-1-获取玩家的当前数据" aria-label="Permalink to &quot;2.1 获取玩家的当前数据&quot;">​</a></h3><ul><li>HuskSync 提供了一种用于获取玩家当前数据的方法 <code>HuskSyncAPI#getCurrentData(User)</code>，会返回一个提供了 <code>Optional&lt;DataSnapshot.Unpacked&gt;</code> 的 <code>CompletableFuture</code>。</li><li>该方法会获取在线用户当前的数据，若不在线则会获取最后保存的数据（如果未曾出现在此服务器中，则会返回一个空的 optional 对象）</li></ul><h4 id="代码示例——获取玩家当前数据快照" tabindex="-1">代码示例——获取玩家当前数据快照 <a class="header-anchor" href="#代码示例——获取玩家当前数据快照" aria-label="Permalink to &quot;代码示例——获取玩家当前数据快照&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get a user&#39;s current data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optionalSnapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Couldn&#39;t get data for %s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the snapshot, which you can then do stuff with</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DataSnapshot.Unpacked snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_2-2-获取用户最后保存的数据快照" tabindex="-1">2.2 获取用户最后保存的数据快照 <a class="header-anchor" href="#_2-2-获取用户最后保存的数据快照" aria-label="Permalink to &quot;2.2 获取用户最后保存的数据快照&quot;">​</a></h3><ul><li>需要注意的是前一个方法获取的快照<em>不一定会保存在数据库中</em></li><li>若想要获取用户最后保存的快照，则需要使用 <code>HuskSyncAPI#getLatestSnapshot(User)</code></li></ul><h4 id="代码示例——获取用户最后保存的数据快照" tabindex="-1">代码示例——获取用户最后保存的数据快照 <a class="header-anchor" href="#代码示例——获取用户最后保存的数据快照" aria-label="Permalink to &quot;代码示例——获取用户最后保存的数据快照&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get a user&#39;s current data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optionalSnapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Couldn&#39;t get data for %s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the snapshot, which you can then do stuff with</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DataSnapshot.Unpacked snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_2-3-获取玩家已保存的数据快照" tabindex="-1">2.3 获取玩家已保存的数据快照 <a class="header-anchor" href="#_2-3-获取玩家已保存的数据快照" aria-label="Permalink to &quot;2.3 获取玩家已保存的数据快照&quot;">​</a></h3><ul><li>若你想要获取指定玩家保存的所有快照，你可以使用方法 <code>HuskSyncAPI#getSnapshots(User)</code>。该方法会返回一个提供了 <code>Optional&lt;List&lt;DataSnapshot.Unpacked&gt;&gt;</code> 的 <code>CompletableFuture</code>。</li></ul><h4 id="代码示例——获取玩家已保存的数据快照" tabindex="-1">代码示例——获取玩家已保存的数据快照 <a class="header-anchor" href="#代码示例——获取玩家已保存的数据快照" aria-label="Permalink to &quot;代码示例——获取玩家已保存的数据快照&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get a user&#39;s saved snapshots</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSnapshots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optionalSnapshots </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (optionalSnapshots.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%s has no saved snapshots!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the list of snapshots, which you can then do stuff with</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DataSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Unpacked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; snapshots </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> optionalSnapshots.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="_3-数据快照的打包与解包" tabindex="-1">3. 数据快照的打包与解包 <a class="header-anchor" href="#_3-数据快照的打包与解包" aria-label="Permalink to &quot;3. 数据快照的打包与解包&quot;">​</a></h2><ul><li>HuskSync 提供了两种类型的 <code>DataSnapshot</code> 对象：<code>DataSnapshot.Packed</code> 和 <code>DataSnapshot.Unpacked</code>。 <ul><li><code>DataSnapshot.Packed</code> 是一个数据被序列化为 byte map 的快照。该快照可以被存入数据库或 Redis。</li><li><code>DataSnapshot.Unpacked</code> 是一个从 <code>DataSnapshot.Packed</code> 解包得到的对象。你可以获取、设置并控制快照中的数据。</li></ul></li><li>大多数情况下，你无需担心这些内容，因为 HuskSync 会自动处理 <code>Unpacked</code> 快照。但是，如果你需要在这两种类型的数据之间转化（例如复制快照），你可以使用 <code>HuskSyncAPI#packSnapshot(DataSnapshot.Unpacked)</code> 和 <code>HuskSyncAPI#unpackSnapshot(DataSnapshot.Packed)</code> 方法。</li><li>编辑方法 <code>HuskSyncAPI#editPackedSnapshot(DataSnapshot.Packed</code>、<code>Consumer&lt;DataSnapshot.Unpacked&gt;)</code> 提供了额外的解包、编辑操作，并能将 <code>DataSnapshot</code> 对象重新打包。</li></ul><h4 id="代码示例——数据的打包与解包" tabindex="-1">代码示例——数据的打包与解包 <a class="header-anchor" href="#代码示例——数据的打包与解包" aria-label="Permalink to &quot;代码示例——数据的打包与解包&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get a user&#39;s current data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optionalSnapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User does not exist!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the snapshot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DataSnapshot.Unpacked snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Pack the snapshot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DataSnapshot.Packed packedSnapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">packSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(snapshot);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // You can call #copy() on a packed snapshot to make a copy of it, which you can then edit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Unpack the snapshot again</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DataSnapshot.Unpacked unpackedSnapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unpackSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(packedSnapshot);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="_4-获取和设置数据快照内的数据" tabindex="-1">4. 获取和设置数据快照内的数据 <a class="header-anchor" href="#_4-获取和设置数据快照内的数据" aria-label="Permalink to &quot;4. 获取和设置数据快照内的数据&quot;">​</a></h2><ul><li>在 <code>DataSnapshot</code> 内的数据会以不同类型的 <code>Data</code> 表示；<code>Data.Item.Inventory</code> 表示背包数据，而 <code>Data.Health</code> 表示玩家当前的生命值及生命值上限，<code>Data.Hunger</code> 表示玩家当前的饱食度及饱食度上限，诸如此类。</li><li>在 Bukkit 系服务端中，<code>BukkitData</code> 继承了 <code>Data</code> 类并提供了在 <code>Bukkit</code> 和 <code>HuskSync</code> 数据类型间转化的方法。</li><li><code>DataSnapshot.Unpacked</code> 提供了在对象内获取和设置 <code>Data</code> 的方法，例如 <code>DataSnapshot.Unpacked#getInventory()</code>（会返回一个 <code>Optional</code> 对象）和 <code>DataSnapshot.Unpacked#setHealth(Data.Health)</code>。</li></ul><h3 id="_4-1-数据类型" tabindex="-1">4.1 数据类型 <a class="header-anchor" href="#_4-1-数据类型" aria-label="Permalink to &quot;4.1 数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>识别名称</th><th>描述</th><th>获取方法</th><th>设置方法</th></tr></thead><tbody><tr><td><code>husksync:inventory</code></td><td>玩家背包与快捷栏</td><td><code>#getInventory</code></td><td><code>#setInventory</code></td></tr><tr><td><code>husksync:ender_chest</code></td><td>玩家末影箱</td><td><code>#getEnderChest</code></td><td><code>#setEnderChest</code></td></tr><tr><td><code>husksync:potion_effects</code></td><td>玩家的药水效果</td><td><code>#getPotionEffects</code></td><td><code>#setPotionEffects</code></td></tr><tr><td><code>husksync:advancements</code></td><td>玩家获得的成就</td><td><code>#getAdvancements</code></td><td><code>#setAdvancements</code></td></tr><tr><td><code>husksync:location</code></td><td>玩家所处的位置</td><td><code>#getLocation</code></td><td><code>#setLocation</code></td></tr><tr><td><code>husksync:statistics</code></td><td>玩家的统计数据</td><td><code>#getStatistics</code></td><td><code>#setStatistics</code></td></tr><tr><td><code>husksync:health</code></td><td>玩家的生命值</td><td><code>#getHealth</code></td><td><code>#setHealth</code></td></tr><tr><td><code>husksync:hunger</code></td><td>玩家的饥饿度、饱和度和消耗度</td><td><code>#getHunger</code></td><td><code>#setHunger</code></td></tr><tr><td><code>husksync:attributes</code></td><td>玩家的属性</td><td><code>#getAttributes</code></td><td><code>#setAttributes</code></td></tr><tr><td><code>husksync:experience</code></td><td>玩家的等级、经验值和得分</td><td><code>#getExperience</code></td><td><code>#setExperience</code></td></tr><tr><td><code>husksync:game_mode</code></td><td>玩家的游戏模式</td><td><code>#getGameMode</code></td><td><code>#setGameMode</code></td></tr><tr><td><code>husksync:flight_status</code></td><td>玩家是否能够飞行/当前飞行状态</td><td><code>#getFlightStatus</code></td><td><code>#setFlightStatus</code></td></tr><tr><td><code>husksync:persistent_data</code></td><td>玩家的持久化数据容器</td><td><code>#getPersistentData</code></td><td><code>#setPersistentData</code></td></tr><tr><td>自定义类型; <code>plugin:foo</code></td><td>任意自定义类型</td><td><code>#getData(Identifer)</code></td><td><code>#setData(Identifier)</code></td></tr></tbody></table><ul><li>开发者可以提供自己的 <code>Data</code> 类来实现 <code>Data</code> 示例的同步与保存，并将他们类的 <code>Serializer&lt;&gt;</code> 注册为 <code>Identifier</code>。见<a href="./developers.api-v3.custom-data-api">自定义数据 API</a>章节获取更多信息。</li><li>你只能在服务器上注册了序列化的快照或<a href="./setup.config-file">配置文件</a>启用的内置数据类型中获取数据。若你尝试从快照中获取不支持类型的数据，你会得到一个空的 <code>Optional</code>。</li></ul><h3 id="_4-2-编辑生命值、饥饿度、经验值和游戏模式数据" tabindex="-1">4.2 编辑生命值、饥饿度、经验值和游戏模式数据 <a class="header-anchor" href="#_4-2-编辑生命值、饥饿度、经验值和游戏模式数据" aria-label="Permalink to &quot;4.2 编辑生命值、饥饿度、经验值和游戏模式数据&quot;">​</a></h3><ul><li><code>DataSnapshot.Unpacked#getHealth()</code> 会返回一个 <code>Optional&lt;Data.Health&gt;</code> 对象，你可以以此修改玩家的当前生命值和上限。</li><li><code>DataSnapshot.Unpacked#setHealth(Data.Health)</code> 会设置玩家当前的生命值与上限。你可以创建一个 <code>Health</code> 示例来在 <code>BukkitData.Health.from(double, double, double)</code> 之间传递。</li><li>对饥饿值、经验值和游戏模式数据类型的修改方式与此相同。</li><li>在更新快照中的数据后，你可以使用 <code>DataSnapshot.Unpacked#setHealth(Data.Health)</code> 方法将其保存至数据库。</li></ul><h4 id="代码示例——获取并设置玩家的生命值" tabindex="-1">代码示例——获取并设置玩家的生命值 <a class="header-anchor" href="#代码示例——获取并设置玩家的生命值" aria-label="Permalink to &quot;代码示例——获取并设置玩家的生命值&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get a user&#39;s current data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optionalSnapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User does not exist!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s health and game mode from the snapshot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DataSnapshot.Unpacked snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Optional&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Health</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; healthOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHealth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (healthOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User has no health data!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Optional&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GameMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; gameModeOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGameMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (gameModeOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User has no game mode data!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Optional&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FlightStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; flightStatusOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFlightStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (flightStatusOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User has no flight status data!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // getExperience() and getHunger() work similarly</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the health data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Data.Health health </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> healthOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentHealth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> health.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentHealth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Current health</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> healthScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> health.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHealthScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Health scale (e.g., 20 for 20 hearts)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHealth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BukkitData.Health.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Need max health? Look at the Attributes data type.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the game mode data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Data.GameMode gameMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gameModeOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String gameModeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gameMode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGameModeName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Game mode name (e.g., &quot;SURVIVAL&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setGameMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BukkitData.GameMode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SURVIVAL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get flight data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Data.FlightStatus flightStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flightStatusOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Whether the player is flying</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isFlying </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flightStatus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFlying</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Whether the player is *currently* flying</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canFly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flightStatus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAllowFlight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Whether the player *can* fly</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFlightStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BukkitData.FlightStatus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>若要让代码更加简洁，我们可以使用 <code>HuskSyncAPI#editCurrentData()</code> 方法来获取玩家当前数据并在 <code>Consumer</code> 类中进行操作。</li><li>在 <code>Consumer</code> 中编辑 <code>DataSnapshot</code> 对象的结果会自动传递给 <code>HuskSyncAPI#setCurrentData()</code>，将快照保存至数据库并在玩家在线时更新。</li></ul><h4 id="代码示例——编辑玩家的生命值" tabindex="-1">代码示例——编辑玩家的生命值 <a class="header-anchor" href="#代码示例——编辑玩家的生命值" aria-label="Permalink to &quot;代码示例——编辑玩家的生命值&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Edit a user&#39;s current data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">editCurrentData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s health</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Optional&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Health</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; healthOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHealth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (healthOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User has no health data!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the health data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Data.Health health </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> healthOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s current health</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentHealth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> health.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentHealth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s max health</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxHealth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> health.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMaxHealth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set the player&#39;s health</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHealth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BukkitData.Health.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_4-3-编辑背包和末影箱数据" tabindex="-1">4.3 编辑背包和末影箱数据 <a class="header-anchor" href="#_4-3-编辑背包和末影箱数据" aria-label="Permalink to &quot;4.3 编辑背包和末影箱数据&quot;">​</a></h3><ul><li>我们可以通过 <code>DataSnapshot.Unpacked#getInventory()</code> 方法获取玩家背包数据，它会返回一个 <code>Optional&lt;Data.Items.Inventory&gt;</code>。你也可以通过 <code>DataSnapshot.Unpacked#getEnderChest()</code> 获取玩家末影箱数据。</li><li><code>Data.Items.Inventory</code> 为玩家背包、装备、副手和末影箱物品提供了不依赖平台的 <code>Stack</code> 对象，可以让你查看物品的基本信息而无需浏览完整的 NBT 数据。</li><li>在 Bukkit 中，简单地将 <code>Data.Items.(Inventory/EnderChest)</code> 转为 <code>BukkitData.Items.(Inventory/EnderChest)</code> 来访问 Bukkit 的 <code>ItemStack[]</code> 玩家物品内容，并允许你编辑之。</li></ul><h4 id="代码示例——获取并编辑玩家的末影箱内容" tabindex="-1">代码示例——获取并编辑玩家的末影箱内容 <a class="header-anchor" href="#代码示例——获取并编辑玩家的末影箱内容" aria-label="Permalink to &quot;代码示例——获取并编辑玩家的末影箱内容&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get a user&#39;s current data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optionalSnapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User does not exist!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the snapshot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DataSnapshot.Unpacked snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> optionalSnapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s inventory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Optional&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Inventory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; inventoryOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInventory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (inventoryOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User has no inventory data!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the inventory data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Data.Items.Inventory inventory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inventoryOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s inventory contents</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ItemStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] inventoryContents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((BukkitData.Items.Inventory) inventory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set the player&#39;s inventory contents</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ((BukkitData.Items.Inventory) inventory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inventoryContents);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Save the snapshot - This will update the player if online and save the snapshot to the database</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCurrentData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, snapshot);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>如果你只需要实时更新玩家背包或末影箱的话，这里也存在着方法类允许你编辑或获取玩家的当前背包或末影箱内容。</li><li>背包方法为 <code>#getCurrentInventory</code>、<code>#setCurrentInventory</code> 和 <code>#editCurrentInventory</code>。对于末影箱，这些是 <code>#getCurrentEnderChest</code>、<code>#setCurrentEnderChest</code> 和 <code>#editCurrentEnderChest</code>。如果你喜欢的话，这里也有处理 ItemStacks 的 <code>Contents</code> 方法。</li></ul><h4 id="代码示例——编辑玩家背包" tabindex="-1">代码示例——编辑玩家背包 <a class="header-anchor" href="#代码示例——编辑玩家背包" aria-label="Permalink to &quot;代码示例——编辑玩家背包&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Edit a user&#39;s current inventory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">editCurrentInventory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, inventory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s inventory contents</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ItemStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] inventoryContents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((BukkitData.Items.Inventory) inventory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The array of ItemStacks is a copy of the player&#39;s inventory contents (Typically an array of length 42)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inventoryContents[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ItemStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Material.DIAMOND_SWORD);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inventoryContents[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null = an empty slot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set the player&#39;s inventory contents</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ((BukkitData.Items.Inventory) inventory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inventoryContents);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_4-4-编辑位置数据" tabindex="-1">4.4 编辑位置数据 <a class="header-anchor" href="#_4-4-编辑位置数据" aria-label="Permalink to &quot;4.4 编辑位置数据&quot;">​</a></h3><ul><li>HuskSync 对玩家位置的支持一般用于镜像世界的实例（如 RPG 服务器），且在插件配置中是默认禁用的。</li><li>我们可以通过方法 <code>DataSnapshot.Unpacked#getLocation()</code> 获取玩家位置，这个方法会返回一个 <code>Optional&lt;Data.Location&gt;</code>。</li><li><code>Data.Location</code> 提供了获取和设置玩家位置、仰角和视角的方法。我们也可以用上述提及的 <code>BukkitData</code> 类来用 <code>org.bukkit.Location</code> 设置这个，并通过 <code>HuskSyncAPI#editCurrentData</code> 方法提升执行速度。</li></ul><h4 id="代码示例——编辑玩家的位置" tabindex="-1">代码示例——编辑玩家的位置 <a class="header-anchor" href="#代码示例——编辑玩家的位置" aria-label="Permalink to &quot;代码示例——编辑玩家的位置&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Edit a user&#39;s current data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">editCurrentData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s location</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Optional&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; locationOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (locationOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User has no location data!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the location data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Data.Location location </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> locationOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s location</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    org.bukkit.Location bukkitLocation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((BukkitData.Location) location).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set the player&#39;s location</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ((BukkitData.Location) location).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bukkitLocation);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="_4-5-编辑成就数据" tabindex="-1">4.5 编辑成就数据 <a class="header-anchor" href="#_4-5-编辑成就数据" aria-label="Permalink to &quot;4.5 编辑成就数据&quot;">​</a></h4><ul><li>成就数据可通过 <code>DataSnapshot.Unpacked#getAdvancements()</code> 获取，它会返回一个 <code>Optional&lt;Data.Advancements&gt;</code>。</li><li><code>Data.Advancements</code> 提供了一个包装器，可对列表 <code>Data.Advancements.Advancement</code> 的对象使用，表示玩家完成成就进度的线路图。</li><li>你可以通过 <code>Data.Advancements#setAdvancements(List&lt;Data.Advancements.Advancement&gt;)</code> 方法对玩家的成就列表进行添加或删除。</li></ul><h4 id="代码示例——编辑玩家成就" tabindex="-1">代码示例——编辑玩家成就 <a class="header-anchor" href="#代码示例——编辑玩家成就" aria-label="Permalink to &quot;代码示例——编辑玩家成就&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Edit a user&#39;s current data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">editCurrentData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s advancements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Optional&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Advancements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; advancementsOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAdvancements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (advancementsOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User has no advancements data!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the advancements data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Data.Advancements advancements </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> advancementsOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the player&#39;s advancements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Advancements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Advancement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; playerAdvancements </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;(advancements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAdvancements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Advancement progress is represented by completed critera entries, mapped to when said criteria was completed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; criteria </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;criteria_item_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add an advancement to the player&#39;s advancements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    playerAdvancements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Data.Advancements.Advancement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo:bar/baz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, criteria));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Remove all &quot;recipe&quot; advancements from the player&#39;s advancements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    playerAdvancements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeIf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(advancement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> advancement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;minecraft:recipes/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set the player&#39;s advancements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    advancements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAdvancements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(playerAdvancements);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="_5-创建新的数据快照" tabindex="-1">5. 创建新的数据快照 <a class="header-anchor" href="#_5-创建新的数据快照" aria-label="Permalink to &quot;5. 创建新的数据快照&quot;">​</a></h2><ul><li>HuskSync 提供了创建新快照的方法；可以通过捕捉玩家当前的数据或使用 <code>DataSnapshot.Builder</code> 从零构建。</li></ul><h3 id="_5-1-从玩家当前数据中创建新快照" tabindex="-1">5.1 从玩家当前数据中创建新快照 <a class="header-anchor" href="#_5-1-从玩家当前数据中创建新快照" aria-label="Permalink to &quot;5.1 从玩家当前数据中创建新快照&quot;">​</a></h3><ul><li>你可以通过 <code>HuskSyncAPI#createSnapshot(OnlineUser)</code> 创建一个新快照，这会返回一个以 <code>SaveCause.API</code> 为理由创建的 <code>DataSnapshot.Packed</code>。</li></ul><h4 id="代码示例——将玩家当前数据捕获并创建新快照" tabindex="-1">代码示例——将玩家当前数据捕获并创建新快照 <a class="header-anchor" href="#代码示例——将玩家当前数据捕获并创建新快照" aria-label="Permalink to &quot;代码示例——将玩家当前数据捕获并创建新快照&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a new snapshot from a player&#39;s current data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataSnapshot.Packed data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// editPackedSnapshot() provides a utility for unpacking, editing, then repacking a DataSnapshot object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataSnapshot.Packed edited </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">editPackedSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, (unpacked) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unpacked.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHealth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BukkitData.Health.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example - sets the user&#39;s health to 10 (5 hearts)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Save the snapshot - This will save the snapshot to the database</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(edited);</span></span></code></pre></div><h3 id="_5-2-从零创建新快照" tabindex="-1">5.2 从零创建新快照 <a class="header-anchor" href="#_5-2-从零创建新快照" aria-label="Permalink to &quot;5.2 从零创建新快照&quot;">​</a></h3><ul><li>你可以使用 <code>DataSnapshot.Builder</code> 创建一个新快照。如果想要创建一个包含指定数据并应用于玩家的自定义快照，这会相当有用。</li><li>可通过 <code>HuskSyncAPI#snapshotBuilder()</code> 获取一个新的 <code>DataSnapshot.Builder</code>。</li></ul><h4 id="代码示例——从零创建新快照" tabindex="-1">代码示例——从零创建新快照 <a class="header-anchor" href="#代码示例——从零创建新快照" aria-label="Permalink to &quot;代码示例——从零创建新快照&quot;">​</a></h4><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a new snapshot from scratch</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataSnapshot.Builder builder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">snapshotBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create an empty inventory with a diamond sword in the first slot</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BukkitData.Items.Inventory inventory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BukkitData.Items.Inventory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inventory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ItemStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ItemStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Material.DIAMOND_SWORD) });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inventory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeldItemSlot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set the player&#39;s held item slot to the first slot</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the builder to create, then pack, a new snapshot</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataSnapshot.Packed packed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> builder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveCause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SaveCause.API) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is the default save cause, but you can change it if you want</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OffsetDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minusDays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set the timestamp to 3 days ago</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInventory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inventory) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set the player&#39;s inventory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHealth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BukkitData.Health.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set the player to having 5 hearts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildAndPack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// You can also call just #build() to get a DataSnapshot.Unpacked</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Save the snapshot - This will save the snapshot to the database for a User</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, packed);</span></span></code></pre></div><h2 id="_6-删除数据快照" tabindex="-1">6. 删除数据快照 <a class="header-anchor" href="#_6-删除数据快照" aria-label="Permalink to &quot;6. 删除数据快照&quot;">​</a></h2><ul><li>你可以通过 <code>HuskSyncAPI#deleteSnapshot(User, UUID)</code> 按 UUID 删除玩家的快照。</li><li>该方法会返回一个 CompletableFuture 异步任务，若存在 UUID 对应的快照可删除则返回 <code>true</code>，若不存在则返回 <code>false</code>。</li></ul><h3 id="代码示例——删除快照" tabindex="-1">代码示例——删除快照 <a class="header-anchor" href="#代码示例——删除快照" aria-label="Permalink to &quot;代码示例——删除快照&quot;">​</a></h3><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Delete a snapshot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huskSyncAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, uuid).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (success) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Deleted snapshot with UUID %s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uuid);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No snapshot with UUID %s to delete&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uuid);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,70)]))}const g=i(h,[["render",l]]);export{o as __pageData,g as default};
