import{_ as i,C as t,c as l,o as n,b0 as s,G as c,w as o,j as p}from"./chunks/framework.w6NQj85O.js";const y=JSON.parse('{"title":"点击动作（clickAction）机制","description":"","frontmatter":{},"headers":[],"relativePath":"Oraxen/mechanics.all-mechanics.clickaction-mechanic.md","filePath":"Oraxen/mechanics.all-mechanics.clickaction-mechanic.md"}'),r={name:"Oraxen/mechanics.all-mechanics.clickaction-mechanic.md"};function h(d,a,k,g,E,m){const e=t("center");return n(),l("div",null,[a[1]||(a[1]=s(`<h1 id="点击动作-clickaction-机制" tabindex="-1">点击动作（clickAction）机制 <a class="header-anchor" href="#点击动作-clickaction-机制" aria-label="Permalink to &quot;点击动作（clickAction）机制&quot;">​</a></h1><p>在玩家点击方块或家具时执行命令、发出声音或发送消息</p><h2 id="信息" tabindex="-1">信息 <a class="header-anchor" href="#信息" aria-label="Permalink to &quot;信息&quot;">​</a></h2><p><code>clickAction</code> 机制允许你在玩家点击方块或家具时执行命令、发出声音或发送消息。</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>若要着手制作，先创建一个基础的<a href="./mechanics.noteblock-mechanic.html">方块</a>或<a href="./mechanics.furniture-mechanic.html">家具</a>。</p><p>接下来，在 <code>mechanics</code> 不分，你可以在任何 <code>noteblock-mechanic</code>、<code>furniture-mechanic</code> 或 <code>stringblock-mechanic</code> 下添加默认的 clickAction 机制。</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Mechanics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:      </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  noteblock/furniture/stringblock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    clickActions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">conditions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#player.hasPermission(&quot;test.permission&quot;)&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        actions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[console] say &lt;player&gt; hello &lt;player&gt;!&#39;</span></span></code></pre></div><p>在这步过后，如果玩家拥有权限 <code>test.permission</code>，玩家会触发控制台命令 <code>say hello &lt;player&gt;</code> 的动作。</p><p>如果你没有使用条件，你需要在必要的地方插入括号：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Mechanics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  noteblock/furniture/stringblock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    clickActions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">conditions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        actions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[console] say &lt;player&gt; hello &lt;player&gt;!&#39;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">警告</p><p>这个机制不支持没有碰撞箱的家具。</p></div><h2 id="条件" tabindex="-1">条件 <a class="header-anchor" href="#条件" aria-label="Permalink to &quot;条件&quot;">​</a></h2><p>条件具有强大的灵活性。你可以对玩家（Player）或服务器（Server）使用任意“get”类方法。可参阅下文 Spigot Javadoc 获取所有可用的方法。</p><ul><li><a href="https://hub.spigotmc.org/javadocs/spigot/org/bukkit/entity/Player.html" target="_blank" rel="noreferrer">Player (Spigot-API 1.18.1-R0.1-SNAPSHOT API)</a></li><li><a href="https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Server.html" target="_blank" rel="noreferrer">Server (Spigot-API 1.18.1-R0.1-SNAPSHOT API)</a></li></ul>`,15)),c(e,null,{default:o(()=>a[0]||(a[0]=[p("sup",null,"提示！按“Ctrl + F”并搜索“get”就可以找到所有有效的方法。",-1)])),_:1}),a[2]||(a[2]=s('<p>除此之外，Spring 文档提供了一种理解条件表达式的思路。</p><ul><li><ol start="6"><li><a href="https://docs.spring.io/spring-framework/docs/3.0.x/reference/expressions.html" target="_blank" rel="noreferrer">Spring 表达式语言（SpEL）</a></li></ol></li></ul><h3 id="条件示例" tabindex="-1">条件示例 <a class="header-anchor" href="#条件示例" aria-label="Permalink to &quot;条件示例&quot;">​</a></h3><p><code>#server.getOnlinePlayers().size() &gt; 10</code></p><p><code>#server.getAllowEnd()</code></p><p><code>#server.getDefaultGameMode()</code></p><p><code>#player.world.name == &#39;world&#39;</code></p><p><code>#player.hasPermission(&quot;test.permission&quot;)</code></p><p><code>#player.gamemode.name() == &#39;ADVENTURE&#39;</code></p><h2 id="动作" tabindex="-1">动作 <a class="header-anchor" href="#动作" aria-label="Permalink to &quot;动作&quot;">​</a></h2><p><code>[console] &lt;命令&gt;</code></p><p><code>[player] &lt;命令&gt;</code></p><p><code>[message] &lt;消息&gt;</code></p><p><code>[actionbar] &lt;消息&gt;</code></p><p><code>{source=声源 volume=音量 pitch=音调} [sound] &lt;声音名称&gt;</code></p><h3 id="动作示例" tabindex="-1">动作示例 <a class="header-anchor" href="#动作示例" aria-label="Permalink to &quot;动作示例&quot;">​</a></h3><p><code>[console] say hello</code></p><p><code>[player] say hello</code></p><p><code>[message] &lt;blue&gt;Hello!</code></p><p><code>[actionbar] &lt;gray&gt;Hello from the actionbar!</code></p><p><code>{source=AMBIENT volume=0.1 pitch=1} [sound] minecraft:block.shulker_box.close</code></p>',21))])}const b=i(r,[["render",h]]);export{y as __pageData,b as default};
