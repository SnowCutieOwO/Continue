import{_ as o,c as a,o as l,b0 as i}from"./chunks/framework.w6NQj85O.js";const p=JSON.parse('{"title":"MySQL","description":"","frontmatter":{},"headers":[],"relativePath":"AureliumSkills/configuration.main-config.mysql.md","filePath":"AureliumSkills/configuration.main-config.mysql.md"}'),c={name:"AureliumSkills/configuration.main-config.mysql.md"};function t(d,e,r,s,n,m){return l(),a("div",null,e[0]||(e[0]=[i('<h1 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h1><p>指导 MySQL 数据库存储方式搭建与配置的教程</p><p>在主配置文件 <code>config.yml</code> 下，<code>mysql</code> 部分的选项，允许玩家的数据存储在 MySQL 数据库而非本地的 YAML 文件中。使用 MySQL 存储数据能在玩家数量较多时有更好的性能表现，也允许在多个服务器之间同步玩家的数据，更能让第三方插件更顺畅地与本插件的数据交互。</p><h2 id="基础安装步骤" tabindex="-1">基础安装步骤 <a class="header-anchor" href="#基础安装步骤" aria-label="Permalink to &quot;基础安装步骤&quot;">​</a></h2><p>在配置 AureliumSkills 的配置文件之前，你必须先单独创建一个 MySQL 数据库（通过终端或服务器控制台均可）。这个数据库必须拥有一个域名（通常是 IP 地址）、数据库名称、端口号、用户名以及对应密码。</p><p>配置 MySQL 连接的相关选项在 <code>config.yml</code> 下的 <code>mysql</code> 部分。若要启用 MySQL，你需要将 <code>enabled</code> 项设置为 true。在 <code>host</code> 部分输入你的域名，然后再在 <code>database</code> 下填入数据库名称。之后，再在对应选项下填入用户名与密码。然后在 <code>port</code> 处填入端口号。如果你想要的话，还可以在 <code>ssl</code> 处启用 SSL。</p><p>在服务器启动以后，MySQL 应该就能正常工作了。AureliumSkills 会自动在数据库中创建数据表。若 MySQL 没有正常运作，请仔细检查服务器控制台的报错，或者检查填入的用户名或密码是否正确。</p><h2 id="从-yaml-文件迁移数据" tabindex="-1">从 YAML 文件迁移数据 <a class="header-anchor" href="#从-yaml-文件迁移数据" aria-label="Permalink to &quot;从 YAML 文件迁移数据&quot;">​</a></h2><p>单独启用 MySQL 不会自动从默认的 YAML 中转移玩家数据。若要迁移玩家数据，你需要做一些额外的事情：</p><ol><li>在 YAML 文件存储模式下，使用命令 <code>/skills backup save</code> 创建玩家数据备份；</li><li>关闭服务器；</li><li>照上一部分所讲的内容搭建 MySQL 数据库并启用之（请确保你之后重启了服务器）；</li><li>使用命令 <code>/skills backup load [文件名称]</code>，文件名称则为之前保存过的备份文件（能在备份文件夹（backup）中找到）。</li></ol>',10)]))}const y=o(c,[["render",t]]);export{p as __pageData,y as default};
