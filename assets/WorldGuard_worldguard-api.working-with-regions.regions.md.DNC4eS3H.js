import{_ as i,c as a,o as n,b0 as t}from"./chunks/framework.w6NQj85O.js";const o=JSON.parse('{"title":"区域","description":"","frontmatter":{},"headers":[],"relativePath":"WorldGuard/worldguard-api.working-with-regions.regions.md","filePath":"WorldGuard/worldguard-api.working-with-regions.regions.md"}'),l={name:"WorldGuard/worldguard-api.working-with-regions.regions.md"};function h(e,s,p,k,d,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="区域" tabindex="-1">区域 <a class="header-anchor" href="#区域" aria-label="Permalink to &quot;区域&quot;">​</a></h1><p>每个区域对象都是 <code>ProtectedRegion</code> 的一个子类，这里一共有下列子类：</p><ul><li><code>ProtectedCuboidRegion</code></li><li><code>ProtectedPolygonalRegion</code></li><li><code>GlobalProtectedRegion</code></li></ul><p>每个区域对象存储了：</p><ul><li>区域的命名（不可修改）</li><li>区域的优先级</li><li>区域的（可选）父区域</li><li>成员列表</li><li>拥有者列表</li><li>标志列表</li><li>脏标志列表（译者注：见本章节末尾）</li></ul><p>向量用于指代位置—这些向量对象来自于 WorldEdit（见“引自 Bukkit 的对象”章节来转化 Bukkit 的位置对象）</p><div class="info custom-block"><p class="custom-block-title">示例：修改区域的优先级</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">region.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">示例：设置区域的父区域</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示没有父区域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mall);</span></span></code></pre></div><p>如果你试图创建带有循环继承的区域，这会导致插件报错。</p></div><div class="info custom-block"><p class="custom-block-title">示例：获取区域的平面顶点</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (region </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProtectedPolygonalRegion) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProtectedPolygonalRegion polygon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ProtectedPolygonalRegion) region;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BlockVector2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; points </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> polygon.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPoints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="领域" tabindex="-1">领域 <a class="header-anchor" href="#领域" aria-label="Permalink to &quot;领域&quot;">​</a></h2><p>拥有者和成员（通过 <code>region.getOwners()</code> 和 <code>region.getMembers()</code> 获取）都是 <code>DefaultDomain</code> 的单独实例，它们都存储着玩家名称、玩家的 UUID 以及其所属的权限组。</p><div class="info custom-block"><p class="custom-block-title">示例：将一个成员添加至指定区域]</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultDomain members </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> region.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMembers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> members.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPlayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0ea8eca3-dbf6-47cc-9d1a-c64551ca975c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> members.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;admins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">警告</p><p>通过名称（而不是 UUID）指代玩家不应该被使用，因为名称是可以被更改的。离线模式也不建议使用，否则后果自负。领域中的使用名称而不是 UUID 的方法也已经被标注为弃用。</p></div></div><div class="info custom-block"><p class="custom-block-title">示例：在后台将名称转化为 UUID</p><p>如果你需要将玩家名称转化为 UUID，你必须尽可能在后台进行这个操作，这样你就不会让游戏或服务器卡顿。<br> 你可以使用 WorldGuard 的 <code>DomainInputResolver</code> 类来帮助你。它集成了 <code>Callable&lt;DefaultDomain&gt;</code>，且会返回一个 <code>DefaultDomain</code> 对象，可以用于添加至已存在的领域。它会捕获成员管理命令中的参数。这会在下文详细描述。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Google 的 Guava 库提供了有用的并发类.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下列执行器可在你的插件中重复使用.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ListeningExecutorService executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MoreExecutors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listeningDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newCachedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sk89q&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;g:admins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ProfileService profiles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WorldGuard.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProfileService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DomainInputResolver resolver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DomainInputResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(profiles, input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLocatorPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserLocatorPolicy.UUID_AND_NAME);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ListenableFuture&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DefaultDomain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; future </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 Guava 库制作的反馈</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Futures.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(future, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FutureCallback&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DefaultDomain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DefaultDomain </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        region.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwners</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理错误的相关代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>非常推荐在 UUID 搜索未完成的时候提醒相关的用户。</p></div><h2 id="标志" tabindex="-1">标志 <a class="header-anchor" href="#标志" aria-label="Permalink to &quot;标志&quot;">​</a></h2><p>标志可以通过 <code>getFlag(Flag flag)</code> 方法获取。你可以在返回的 <code>Flags</code> 对象中找到 <code>Flags</code> 的设置，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Flags.BUILD</span></span>
<span class="line"><span>Flags.PVP</span></span>
<span class="line"><span>Flags.LEAF_DECAY</span></span>
<span class="line"><span>Flags.LIGHTNING</span></span></code></pre></div><p>返回值即为对应设置的数据类型。例如，如果你正要调用 <code>Flags.GREET_MESSAGE</code>，而它是一个 <code>StringFlag</code> 对象，那么该方法就会返回 <code>String</code>。</p><div class="info custom-block"><p class="custom-block-title">示例：获取欢迎消息]</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> region.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Flags.GREET_MESSAGE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message);</span></span></code></pre></div><p>若指定区域未设置该标志，则返回值为 <code>null</code>。</p></div><h3 id="设置标志" tabindex="-1">设置标志 <a class="header-anchor" href="#设置标志" aria-label="Permalink to &quot;设置标志&quot;">​</a></h3><p>标志可以通过方法 <code>setFlag(Flag flag, ? value)</code>。所设置的值必须与标志类型对应。例如，若标志类型为 <code>StringFlag</code>，则你只能设置一个 <code>String</code> 类型的标志：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">region.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Flags.GREET_MESSAGE, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>标志可通过将值设置为 <code>null</code> 来清除设置。</p><p>区域组可以通过调用 <code>getRegionGroupFlag()</code> 方法对其对应的标志进行设置：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RegionGroupFlag flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flags.PVP.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRegionGroupFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">示例：设置区域组的 <code>use</code> 标志]</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">region.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Flags.USE, StateFlag.State.ALLOW);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">region.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Flags.USE.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRegionGroupFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), RegionGroup.MEMBERS);</span></span></code></pre></div></div><h3 id="自定义区域标志" tabindex="-1">自定义区域标志 <a class="header-anchor" href="#自定义区域标志" aria-label="Permalink to &quot;自定义区域标志&quot;">​</a></h3><p>在 6.2 版本，插件可以加入自定义的区域标志和选区处理。见“自定义标志和选区处理模块”章节来获得更多信息。</p><h2 id="创建区域" tabindex="-1">创建区域 <a class="header-anchor" href="#创建区域" aria-label="Permalink to &quot;创建区域&quot;">​</a></h2><p><code>ProtectedRegion</code> 是一个抽象类，所以你必须使用它其中的一个子类。例如，你必须使用 <code>ProtectedCuboidRegion</code> 子类。</p><p>在每个例子中，必须提供一个区域命名。有效区域必须符合下列正则表达式 <code>^[A-Za-z0-9_,&#39;\\-\\+/]{1,}</code>，也就是，区域命名只在包含大小写英文字母、数字、下划线、英文逗号、英文单引号、英文横杠、英文加号或正斜杠中的任意一种或多种字符时有效。区域命名是大小写敏感的。命名的有效性可以通过方法 <code>ProtectedRegion.isValidId(String)</code> 检查。</p><p>若要保存一个已创建的区域，请见“区域管理模块”章节。</p><h3 id="长方体区域" tabindex="-1">长方体区域 <a class="header-anchor" href="#长方体区域" aria-label="Permalink to &quot;长方体区域&quot;">​</a></h3><p>若要创建一个新的长方体区域，需要指定该区域中的两个对角线上的端点。任意对角线上两端点均可接受。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BlockVector3 min </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BlockVector3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BlockVector3 max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BlockVector3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ProtectedRegion region </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProtectedCuboidRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;spawn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min, max);</span></span></code></pre></div><h3 id="平面多边形区域" tabindex="-1">平面多边形区域 <a class="header-anchor" href="#平面多边形区域" aria-label="Permalink to &quot;平面多边形区域&quot;">​</a></h3><p>只支持平面多边形。这些是垂直方向上无限拓展的区域，也就是从最小 Y 轴覆盖到最大 Y 轴的区域。至少需要三个点来创建一个有效的平面多边形区域。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BlockVector2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; points </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">points.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BlockVector2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">points.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BlockVector2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">points.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BlockVector2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 54</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ProtectedRegion region </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProtectedPolygonalRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;spawn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, points, minY, maxY);</span></span></code></pre></div><h3 id="全局区域" tabindex="-1">全局区域 <a class="header-anchor" href="#全局区域" aria-label="Permalink to &quot;全局区域&quot;">​</a></h3><p>不需要将它与全局区域混淆，本章节提到的全局区域没有物理边界。也不包含任意一点。全局区域[i]需要[/i]用到 <code>GlobalProtectedRegion</code> 对象，但其他区域也可以调用该类（用户也可以在命令 <code>/rg define</code> 中使用 <code>-g</code> 参数创建区域）</p><p>这些区域通常用于创建继承用的模板区域。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ProtectedRegion region </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GlobalProtectedRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="区域查询" tabindex="-1">区域查询 <a class="header-anchor" href="#区域查询" aria-label="Permalink to &quot;区域查询&quot;">​</a></h2><p>这里有一些方法在指定区域执行指定查询</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>如果你对在所有区域中进行查询的操作感兴趣，请参考“<a href="./worldguard-api.working-with-regions.querying-protection">区域查询</a>”章节。</p></div><h3 id="测试点容器" tabindex="-1">测试点容器 <a class="header-anchor" href="#测试点容器" aria-label="Permalink to &quot;测试点容器&quot;">​</a></h3><p><code>boolean contains(BlockVector3)</code> 可以用于测试一个区域中是否包含指定的点。</p><div class="info custom-block"><p class="custom-block-title">示例：查询包含位置 (20, 0, 30) 的区域]</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">region.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BlockVector3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div></div><h3 id="查找重叠区域" tabindex="-1">查找重叠区域 <a class="header-anchor" href="#查找重叠区域" aria-label="Permalink to &quot;查找重叠区域&quot;">​</a></h3><p>方法 <code>getIntersectingRegions(Collection&lt;ProtectedRegion&gt;)</code> 的调用可以用于返回相互重叠的区域。这些区域[b]不一定[/b]是相互之间存在完全包含关系的。</p><div class="info custom-block"><p class="custom-block-title">示例：查找 spawn 区域附近重叠的区域]</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ProtectedRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; candidates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lists.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">candidates.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mall);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">candidates.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hospital);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ProtectedRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; overlapping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spawn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getIntersectingRegions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(candidates);</span></span></code></pre></div></div><h3 id="脏标志" tabindex="-1">脏标志 <a class="header-anchor" href="#脏标志" aria-label="Permalink to &quot;脏标志&quot;">​</a></h3><p>每当对一个区域的修改完成以后，一个“脏”标志（不会和其他标志混在一起）就会被设置在该区域对象上。 这可以用方法 <code>isDirty()</code> 测试，且用于区域管理模块，用以获悉哪些区域需要进行保存操作。</p>`,52)]))}const g=i(l,[["render",h]]);export{o as __pageData,g as default};
