import{_ as a,c as e,o as s,b0 as r}from"./chunks/framework.w6NQj85O.js";const u=JSON.parse('{"title":"在服务器间同步数据","description":"","frontmatter":{},"headers":[],"relativePath":"LuckPerms/how-to.sync-data-between-servers.md","filePath":"LuckPerms/how-to.sync-data-between-servers.md"}'),i={name:"LuckPerms/how-to.sync-data-between-servers.md"};function d(n,t,o,h,l,c){return s(),e("div",null,t[0]||(t[0]=[r('<h1 id="在服务器间同步数据" tabindex="-1">在服务器间同步数据 <a class="header-anchor" href="#在服务器间同步数据" aria-label="Permalink to &quot;在服务器间同步数据&quot;">​</a></h1><p>数据可以在不同服务器之间同步。</p><h2 id="需求" tabindex="-1">需求 <a class="header-anchor" href="#需求" aria-label="Permalink to &quot;需求&quot;">​</a></h2><p>若要同步数据，你<strong>必须</strong>使用远程数据库。所有服务器都会连接到同一个数据库。</p><p>见“<a href="./storage">存储类型</a>”章节获取更多信息。你需要使用这个章节提及的“<strong>远程数据库</strong>”。</p><h2 id="立刻通知更新" tabindex="-1">立刻通知更新 <a class="header-anchor" href="#立刻通知更新" aria-label="Permalink to &quot;立刻通知更新&quot;">​</a></h2><p>直接连接至同一个数据库显然不能立即在服务器之间同步数据。LuckPerms 需要知道数据发生变化才能对它进行更新。</p><p>这可以通过许多方式实现。</p><p>所有这些设置都可以在 <code>更新提醒 &amp; 通信服务</code> 部分中找到。</p><h2 id="同步间隔" tabindex="-1">同步间隔 <a class="header-anchor" href="#同步间隔" aria-label="Permalink to &quot;同步间隔&quot;">​</a></h2><p>你可以决定 LuckPerms 从数据库中获取更新的延时。 这个时间可以在配置文件中修改，默认值为 <code>-1</code>（表示禁用该功能）。</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sync-minutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-1</span></span></code></pre></div><h2 id="监控文件" tabindex="-1">监控文件 <a class="header-anchor" href="#监控文件" aria-label="Permalink to &quot;监控文件&quot;">​</a></h2><p>若你使用的是基于文件的存储类型（YAML、JSON 或 HOCON），LuckPerms 可以监听这些文件，并在文件出现改动后自动重载。</p><p>这表示你可以编辑其中一个数据文件，所作改动会立即应用至服务器。<br> 该设置可在配置文件中找到，默认关闭。</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">watch-files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="lp-sync" tabindex="-1">/lp sync <a class="header-anchor" href="#lp-sync" aria-label="Permalink to &quot;/lp sync&quot;">​</a></h2><p><code>/lp sync</code> 命令会让插件从数据库/文件自动同步最新的变动。</p><h2 id="通信服务" tabindex="-1">通信服务 <a class="header-anchor" href="#通信服务" aria-label="Permalink to &quot;通信服务&quot;">​</a></h2><p>在安装后，其他服务器会收到更新提醒，并响应从数据库传来的最后一份复制数据。</p><p>数据<strong>不会</strong>在该服务中存储 —— 它只会被用作通信平台。</p><p>通信服务可以在配置文件的 <code>messaging-service</code> 部分进行设置。</p><h3 id="可用选项" tabindex="-1">可用选项 <a class="header-anchor" href="#可用选项" aria-label="Permalink to &quot;可用选项&quot;">​</a></h3><table tabindex="0"><thead><tr><th>服务</th><th>描述</th></tr></thead><tbody><tr><td>sql</td><td>使用 SQL 数据库来构建通信队列系统。若你正在使用远程 SQL 数据库，则此为默认选项。</td></tr><tr><td>pluginmsg</td><td>使用插件信道来与群组交流。LuckPerms 必须安装在所有群组服和子服上。在多于一个群组的情况下不会生效。</td></tr><tr><td>lilypad</td><td>使用 LilyPad Connect 的 PubSub 系统来交流。</td></tr><tr><td>redis</td><td>连接至 Redis 实例并使用 PubSub 系统来交流。</td></tr><tr><td>rabbitmq</td><td>连接至 RabbitMQ 实例并使用 PubSub over AMQP 系统来交流。</td></tr><tr><td>nats</td><td>连接至 Nats 实例并使用 PubSub 系统来交流。</td></tr><tr><td>custom</td><td>强制 messaging-service 使用你通过 LuckPerms API 实现的通信方式。</td></tr></tbody></table><p>你也可以通过 LuckPerms API 实现自己的通信服务。但在此之前确保你将 messaging-service 设置为了 <code>custom</code>，否则插件会在启用时报错。</p>',25)]))}const b=a(i,[["render",d]]);export{u as __pageData,b as default};
