import{_ as i,c as a,o as e,b0 as n}from"./chunks/framework.w6NQj85O.js";const c=JSON.parse('{"title":"开发者 API","description":"","frontmatter":{},"headers":[],"relativePath":"LuckPerms/developers.api-introduction.md","filePath":"LuckPerms/developers.api-introduction.md"}'),l={name:"LuckPerms/developers.api-introduction.md"};function t(h,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="开发者-api" tabindex="-1">开发者 API <a class="header-anchor" href="#开发者-api" aria-label="Permalink to &quot;开发者 API&quot;">​</a></h1><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>LuckPerms 有一整套供开发者使用的 API，允许其他插件能够读取 LuckPerms 的数据，并简单地让 LuckPerms 与现有的插件与系统深入交互。</p><h3 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h3><p>API 使用的是语义化版本号，也就是说在不向前兼容的版本出现后，大版本号就会增加。至少你可以确保你的集成能在小版本间通用。</p><p>当前的 API 版本为 <code>5.4</code>.</p><ul><li>LuckPerms 的 API 包为 <code>net.luckperms.api</code></li><li>JavaDocs 在<a href="https://javadoc.io/doc/net.luckperms/api/latest/" target="_blank" rel="noreferrer">标准 JavaDoc</a>或 API <a href="https://github.com/LuckPerms/LuckPerms/tree/master/api/src/main/java/net/luckperms/api" target="_blank" rel="noreferrer">源码</a>中均可查询。</li></ul><h3 id="更新日志" tabindex="-1">更新日志 <a class="header-anchor" href="#更新日志" aria-label="Permalink to &quot;更新日志&quot;">​</a></h3><ul><li><code>2.x</code> 版本，API 首次发布。</li><li><code>3.x</code>（2017 年 2 月 19 日）引入了不向前兼容的内容。[<a href="https://gist.github.com/lucko/fdf6ae4b2d9e466d8103dd9c68e5db9e" target="_blank" rel="noreferrer">更新日志</a>]</li><li><code>4.x</code>（2017 年 11 月 7 日）引入了不向前兼容的内容。[<a href="https://gist.github.com/lucko/34c5c3c52ad80f8541395a096a937e91" target="_blank" rel="noreferrer">更新日志</a>]</li><li><code>5.x</code> 版本对 API 进行了完全重写。同时加入了桥接工具以维持与旧版本 API 的兼容性。</li></ul><h2 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h2><ul><li><a href="#将-luckperms-导入工程">将 LuckPerms 导入工程</a><ul><li><a href="#maven">Maven</a></li><li><a href="#gradle">Gradle</a></li><li><a href="#手动">手动</a></li></ul></li><li><a href="#获取-api-实例">获取 API 实例</a><ul><li><a href="#通过-bukkit-的-servicesmanager">通过 Bukkit 的 ServicesManager</a></li><li><a href="#通过-sponge-的-servicesmanager">通过 Sponge 的 ServicesManager</a></li><li><a href="#单例引入">单例引入</a></li></ul></li><li><a href="#实用信息">实用信息</a><ul><li><a href="#线程安全">线程安全</a></li><li><a href="#不可变性">不可变性</a></li><li><a href="#阻止操作">阻止操作</a></li><li><a href="#使用-completablefutures">使用 CompletableFutures</a></li><li><a href="#异步事件回调">异步事件&amp;回调</a></li></ul></li></ul><h3 id="将-luckperms-导入工程" tabindex="-1">将 LuckPerms 导入工程 <a class="header-anchor" href="#将-luckperms-导入工程" aria-label="Permalink to &quot;将 LuckPerms 导入工程&quot;">​</a></h3><p>API 成品可以在 <a href="http://central.sonatype.org/" target="_blank" rel="noreferrer">Maven 中心</a>的仓库中找到。</p><h4 id="maven" tabindex="-1">Maven <a class="header-anchor" href="#maven" aria-label="Permalink to &quot;Maven&quot;">​</a></h4><p>如果你正在使用 Maven，将这些内容添加至 POM 的 <code>dependencies</code> 部分即可。</p><div class="language-XML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">XML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;net.luckperms&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;5.4&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;provided&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h4><p>若你正在使用 Gradle，请将这些内容放入你的构建脚本中。</p><h5 id="groovy-dsl" tabindex="-1">Groovy DSL： <a class="header-anchor" href="#groovy-dsl" aria-label="Permalink to &quot;Groovy DSL：&quot;">​</a></h5><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compileOnly </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;net.luckperms:api:5.4&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="kotlin-dsl" tabindex="-1">Kotlin DSL： <a class="header-anchor" href="#kotlin-dsl" aria-label="Permalink to &quot;Kotlin DSL：&quot;">​</a></h5><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compileOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;net.luckperms:api:5.4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="手动" tabindex="-1">手动 <a class="header-anchor" href="#手动" aria-label="Permalink to &quot;手动&quot;">​</a></h4><p>如果你想要将 API 依赖手动导入，你可以通过下列方式获取 jar：</p><ol><li>进入 <a href="https://repo1.maven.org/maven2/net/luckperms/api/" target="_blank" rel="noreferrer"><code>https://repo1.maven.org/maven2/net/luckperms/api/</code></a></li><li>选择你需要使用的版本</li><li>下载 <code>api-x-x.jar</code> 文件</li></ol><h3 id="获取-api-实例" tabindex="-1">获取 API 实例 <a class="header-anchor" href="#获取-api-实例" aria-label="Permalink to &quot;获取 API 实例&quot;">​</a></h3><p>API 示例的根为 <code>LuckPerms</code>，在对 API 做任何事之前都需要先生成一个 API 实例。</p><p>它可以通过许多方式产生。</p><h4 id="通过-bukkit-的-servicesmanager" tabindex="-1">通过 Bukkit 的 ServicesManager <a class="header-anchor" href="#通过-bukkit-的-servicesmanager" aria-label="Permalink to &quot;通过 Bukkit 的 ServicesManager&quot;">​</a></h4><p>插件启用后，Bukkit 的 ServicesManager 会提供一个 <code>LuckPerms</code> 的实例。（只在 Bukkit 上有效！）</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RegisteredServiceProvider&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LuckPerms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bukkit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getServicesManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRegistration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LuckPerms.class);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LuckPerms api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="通过-sponge-的-servicesmanager" tabindex="-1">通过 Sponge 的 ServicesManager <a class="header-anchor" href="#通过-sponge-的-servicesmanager" aria-label="Permalink to &quot;通过 Sponge 的 ServicesManager&quot;">​</a></h4><p>插件启用后，Sponge 的 ServicesManager 会提供一个 <code>LuckPerms</code> 的实例。（只在 Sponge 上有效！）</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Optional&lt;ProviderRegistration&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LuckPerms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Sponge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getServiceManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRegistration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LuckPerms.class);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LuckPerms api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="单例引入" tabindex="-1">单例引入 <a class="header-anchor" href="#单例引入" aria-label="Permalink to &quot;单例引入&quot;">​</a></h4><p>插件启用后，<code>LuckPermsProvider</code> 会提供一个 <code>LuckPerms</code> 的实例。（全平台通用） **注意：**若 API 未载入，则这个方法会抛出一个 <code>IllegalStateException</code>。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LuckPerms api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LuckPermsProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="实用信息" tabindex="-1">实用信息 <a class="header-anchor" href="#实用信息" aria-label="Permalink to &quot;实用信息&quot;">​</a></h3><p>在你将 API 类添加至你的项目并生成了一个 <code>LuckPerms</code> 的实例之后，你可以开始使用 API 了。但是，在你进一步探索之前，我们希望你阅读并了解下面的信息。</p><h4 id="线程安全" tabindex="-1">线程安全 <a class="header-anchor" href="#线程安全" aria-label="Permalink to &quot;线程安全&quot;">​</a></h4><ul><li>所有 LuckPerms 的示例都是对线程安全的。你可以以异步定时任务的形式（或从其他线程）与 API 实例交互</li><li>这也包括在 Bukkit/Bungee/Sponge 的权限查询方法。它们可以在 LuckPerms 用作权限插件时被安全地异步调用。</li></ul><h4 id="不可变性" tabindex="-1">不可变性 <a class="header-anchor" href="#不可变性" aria-label="Permalink to &quot;不可变性&quot;">​</a></h4><ul><li>在方法从 Java 集合框架返回类的情况下，除非另有说明，否则默认返回的方法始终不可变。（JavaDoc 有详细说明）</li><li>这表示你不能对已经返回的任何集合进行修改，且这些集合只是表示方法调用时返回数据的准确表示。</li></ul><h4 id="阻止操作" tabindex="-1">阻止操作 <a class="header-anchor" href="#阻止操作" aria-label="Permalink to &quot;阻止操作&quot;">​</a></h4><ul><li>一些方法不对“主线程友好”，这表示它们如果从 Minecraft 服务器的主线程调用，服务器就会卡顿。</li><li>这是因为很多方法涉及了与文件系统或网络有关的 I/O 内容。</li><li>大多数情况下，方法均会返回 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="noreferrer">CompletableFuture</a>。</li><li>这些对象一开始对某些用户而言可能非常复杂 —— 所以在尝试使用之前对它们有一个基本的了解很重要。</li><li>一般来讲，非常建议尽可能在与 API 交互时使用异步任务。一些方法不会返回异步对象，但仍可能会参与一些复杂的计算。</li></ul><h4 id="使用-completablefutures" tabindex="-1">使用 CompletableFutures <a class="header-anchor" href="#使用-completablefutures" aria-label="Permalink to &quot;使用 CompletableFutures&quot;">​</a></h4><p>这是一个简短的教程。若你想要了解更多，请阅读 JavaDoc 的 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="noreferrer">CompletableFuture</a> 与 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html" target="_blank" rel="noreferrer">CompletionStage</a> 部分。</p><p>为了便于解释，我们从 <code>ActionLogger</code> 类中拿出这个方法：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompletableFuture</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ActionLog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>在调用方法后，我们得到了一个 <code>CompletableFuture&lt;ActionLog&gt;</code> —— 我们想要的对象是 <code>ActionLog</code>。<code>CompletableFuture</code> 表示的是某个计算的结果（也就是说获取 ActionLog 的计算），并包含了获取 <code>ActionLog</code> 对象的方法。</p><p>如果我们的方法调用已经是异步（如果我们调用的方法来自于异步定时任务），那么我们就可以完全以异步对象将其去掉。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  Calling this method &quot;requests&quot; an ActionLog from the API.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  However, it&#39;s unlikely that the log will be available immediately...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  We need to wait for it to be supplied.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompletableFuture&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ActionLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; logFuture </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionLogger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  Since we&#39;re already on an async thread, it doesn&#39;t matter how long we</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  have to wait for the elusive Log to show up.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  The #join method will block - and wait until the Log has been supplied,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  and then return it.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  If for whatever reason the process to obtain a ActionLog threw an exception,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  this method will rethrow an the same exception wrapped in a CompletionException</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ActionLog log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logFuture.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>其他方法是使用对 CompletableFuture 使用 <code>#join</code> 来注册一个回调，使得在 <code>Log</code> 产生时执行相应内容。</p><p>若我们需要在服务器主线程上使用实例，那么服务器主线程上会产生一个特殊的任务执行器传递给回调。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create an executor that will run our callback on the server thread.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Executor executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runnable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bukkit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getScheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plugin, runnable);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Register a callback with the future.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logFuture.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">whenCompleteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BiConsumer&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ActionLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// can be reduced to a lambda, I&#39;ve left it as an anonymous class for clarity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ActionLog </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // There was some error whilst getting the log.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Use the log for something...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, executor);</span></span></code></pre></div><p>如果你不关心报错，那么这个还可以进一步简化：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logFuture.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenAcceptAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Use the log for something */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, executor);</span></span></code></pre></div><p>CompletableFuture 类一开始用起来可能会相当复杂（在 Java 中它还是个比较年轻的 API！），但它是封装异步计算的好方法，且在 Minecraft 的角度看来，它不会因等待超长的 I/O 调用而堵塞主线程。</p><h4 id="异步事件-回调" tabindex="-1">异步事件&amp;回调 <a class="header-anchor" href="#异步事件-回调" aria-label="Permalink to &quot;异步事件&amp;回调&quot;">​</a></h4><ul><li>LuckPerms 的绝大部分工作都是在非服务器主线程上以异步任务的方式完成的。</li><li>在此前提下，还要去异步调用 LuckPerms 的想法会很好笑 —— 这表示，在没有错误的情况下，所有事件监听器都是异步调用的。</li></ul><p>需要注意的是，Bukkit、Sponge 和 Minecraft 服务器的许多部分都不对线程友好，且应只从服务器线程方面与之交互。若你需要在 LuckPerms 的事件监听器或回调中使用来自 Bukkit 或 Sponge 的方法，你需要用计划表来执行操作。</p>`,61)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
